
SPI_SPI_PDC_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004c0  20000000  00400ed0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000054  200004c0  00401390  000204c0  2**2
                  ALLOC
  3 .stack        00003004  20000514  004013e4  000204c0  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204ee  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009454  00000000  00000000  00020547  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2a  00000000  00000000  0002999b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000030b6  00000000  00000000  0002b6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000640  00000000  00000000  0002e77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000588  00000000  00000000  0002edbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001406a  00000000  00000000  0002f343  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009f23  00000000  00000000  000433ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00051134  00000000  00000000  0004d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000da4  00000000  00000000  0009e404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003518 	.word	0x20003518
  400004:	004008f1 	.word	0x004008f1
  400008:	004008ed 	.word	0x004008ed
  40000c:	004008ed 	.word	0x004008ed
  400010:	004008ed 	.word	0x004008ed
  400014:	004008ed 	.word	0x004008ed
  400018:	004008ed 	.word	0x004008ed
	...
  40002c:	004008ed 	.word	0x004008ed
  400030:	004008ed 	.word	0x004008ed
  400034:	00000000 	.word	0x00000000
  400038:	004008ed 	.word	0x004008ed
  40003c:	004008ed 	.word	0x004008ed
  400040:	004008ed 	.word	0x004008ed
  400044:	004008ed 	.word	0x004008ed
  400048:	004008ed 	.word	0x004008ed
  40004c:	004008ed 	.word	0x004008ed
  400050:	004008ed 	.word	0x004008ed
  400054:	004008ed 	.word	0x004008ed
  400058:	004008ed 	.word	0x004008ed
  40005c:	004008ed 	.word	0x004008ed
  400060:	004008ed 	.word	0x004008ed
  400064:	004008ed 	.word	0x004008ed
  400068:	00000000 	.word	0x00000000
  40006c:	004008ed 	.word	0x004008ed
  400070:	004008ed 	.word	0x004008ed
  400074:	00400629 	.word	0x00400629
  400078:	004008ed 	.word	0x004008ed
  40007c:	004008ed 	.word	0x004008ed
  400080:	004008ed 	.word	0x004008ed
  400084:	004008ed 	.word	0x004008ed
  400088:	00400639 	.word	0x00400639
  40008c:	004008ed 	.word	0x004008ed
  400090:	004008ed 	.word	0x004008ed
  400094:	00400c01 	.word	0x00400c01
  400098:	004008ed 	.word	0x004008ed
  40009c:	004008ed 	.word	0x004008ed
  4000a0:	004008ed 	.word	0x004008ed
  4000a4:	004008ed 	.word	0x004008ed
  4000a8:	004008ed 	.word	0x004008ed
  4000ac:	004008ed 	.word	0x004008ed
  4000b0:	004008ed 	.word	0x004008ed
  4000b4:	004008ed 	.word	0x004008ed
  4000b8:	004008ed 	.word	0x004008ed
	...
  4000fc:	004008ed 	.word	0x004008ed
  400100:	004008ed 	.word	0x004008ed
  400104:	004008ed 	.word	0x004008ed
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	200004c0 	.word	0x200004c0
  400164:	00000000 	.word	0x00000000
  400168:	00400ed0 	.word	0x00400ed0

0040016c <frame_dummy>:
  40016c:	4b08      	ldr	r3, [pc, #32]	; (400190 <frame_dummy+0x24>)
  40016e:	b510      	push	{r4, lr}
  400170:	b11b      	cbz	r3, 40017a <frame_dummy+0xe>
  400172:	4908      	ldr	r1, [pc, #32]	; (400194 <frame_dummy+0x28>)
  400174:	4808      	ldr	r0, [pc, #32]	; (400198 <frame_dummy+0x2c>)
  400176:	f3af 8000 	nop.w
  40017a:	4808      	ldr	r0, [pc, #32]	; (40019c <frame_dummy+0x30>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b903      	cbnz	r3, 400182 <frame_dummy+0x16>
  400180:	bd10      	pop	{r4, pc}
  400182:	4b07      	ldr	r3, [pc, #28]	; (4001a0 <frame_dummy+0x34>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0fb      	beq.n	400180 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	bf00      	nop
  400190:	00000000 	.word	0x00000000
  400194:	200004c4 	.word	0x200004c4
  400198:	00400ed0 	.word	0x00400ed0
  40019c:	00400ed0 	.word	0x00400ed0
  4001a0:	00000000 	.word	0x00000000

004001a4 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4001a4:	b510      	push	{r4, lr}
  4001a6:	b0a2      	sub	sp, #136	; 0x88
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001a8:	4818      	ldr	r0, [pc, #96]	; (40020c <sysclk_init+0x68>)
  4001aa:	4b19      	ldr	r3, [pc, #100]	; (400210 <sysclk_init+0x6c>)
  4001ac:	4798      	blx	r3
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001ae:	2000      	movs	r0, #0
  4001b0:	4b18      	ldr	r3, [pc, #96]	; (400214 <sysclk_init+0x70>)
  4001b2:	4798      	blx	r3
	case OSC_SLCK_32K_RC:
		return 1;

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4001b4:	4c18      	ldr	r4, [pc, #96]	; (400218 <sysclk_init+0x74>)
  4001b6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fc      	beq.n	4001b6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001bc:	4b17      	ldr	r3, [pc, #92]	; (40021c <sysclk_init+0x78>)
  4001be:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4001c0:	4a17      	ldr	r2, [pc, #92]	; (400220 <sysclk_init+0x7c>)
  4001c2:	4b18      	ldr	r3, [pc, #96]	; (400224 <sysclk_init+0x80>)
  4001c4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001c6:	4c18      	ldr	r4, [pc, #96]	; (400228 <sysclk_init+0x84>)
  4001c8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d0fc      	beq.n	4001c8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001ce:	2000      	movs	r0, #0
  4001d0:	4b16      	ldr	r3, [pc, #88]	; (40022c <sysclk_init+0x88>)
  4001d2:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d4:	4b16      	ldr	r3, [pc, #88]	; (400230 <sysclk_init+0x8c>)
  4001d6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d8:	4816      	ldr	r0, [pc, #88]	; (400234 <sysclk_init+0x90>)
  4001da:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x6c>)
  4001dc:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  4001de:	4b16      	ldr	r3, [pc, #88]	; (400238 <sysclk_init+0x94>)
  4001e0:	681a      	ldr	r2, [r3, #0]
  4001e2:	4b16      	ldr	r3, [pc, #88]	; (40023c <sysclk_init+0x98>)
  4001e4:	4413      	add	r3, r2
  4001e6:	4a16      	ldr	r2, [pc, #88]	; (400240 <sysclk_init+0x9c>)
  4001e8:	4293      	cmp	r3, r2
  4001ea:	d80c      	bhi.n	400206 <sysclk_init+0x62>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  4001ec:	2320      	movs	r3, #32
  4001ee:	9300      	str	r3, [sp, #0]
  4001f0:	ab02      	add	r3, sp, #8
  4001f2:	220f      	movs	r2, #15
  4001f4:	210e      	movs	r1, #14
  4001f6:	4813      	ldr	r0, [pc, #76]	; (400244 <sysclk_init+0xa0>)
  4001f8:	4c13      	ldr	r4, [pc, #76]	; (400248 <sysclk_init+0xa4>)
  4001fa:	47a0      	blx	r4
		unique_id, 32);

		trim_value = unique_id[16] & 0x0000FFFF;
		supc_set_regulator_trim_user(SUPC, trim_value);
  4001fc:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
  400200:	4812      	ldr	r0, [pc, #72]	; (40024c <sysclk_init+0xa8>)
  400202:	4b13      	ldr	r3, [pc, #76]	; (400250 <sysclk_init+0xac>)
  400204:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400206:	b022      	add	sp, #136	; 0x88
  400208:	bd10      	pop	{r4, pc}
  40020a:	bf00      	nop
  40020c:	07270e00 	.word	0x07270e00
  400210:	00400ac9 	.word	0x00400ac9
  400214:	00400745 	.word	0x00400745
  400218:	00400769 	.word	0x00400769
  40021c:	00400789 	.word	0x00400789
  400220:	0e4d3f01 	.word	0x0e4d3f01
  400224:	400e0400 	.word	0x400e0400
  400228:	00400795 	.word	0x00400795
  40022c:	004006dd 	.word	0x004006dd
  400230:	004009e1 	.word	0x004009e1
  400234:	07270000 	.word	0x07270000
  400238:	2000008c 	.word	0x2000008c
  40023c:	f9bdd3c0 	.word	0xf9bdd3c0
  400240:	01c9c380 	.word	0x01c9c380
  400244:	400e0a00 	.word	0x400e0a00
  400248:	20000001 	.word	0x20000001
  40024c:	400e1410 	.word	0x400e1410
  400250:	004008d1 	.word	0x004008d1

00400254 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
  400254:	b538      	push	{r3, r4, r5, lr}

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	WDT->WDT_MR = WDT_MR_WDDIS;
  400256:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40025a:	4b58      	ldr	r3, [pc, #352]	; (4003bc <system_board_init+0x168>)
  40025c:	605c      	str	r4, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40025e:	200b      	movs	r0, #11
  400260:	4d57      	ldr	r5, [pc, #348]	; (4003c0 <system_board_init+0x16c>)
  400262:	47a8      	blx	r5
  400264:	200c      	movs	r0, #12
  400266:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400268:	4b56      	ldr	r3, [pc, #344]	; (4003c4 <system_board_init+0x170>)
  40026a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40026e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400270:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400274:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40027a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400280:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400282:	2204      	movs	r2, #4
  400284:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400286:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40028a:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  40028c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400290:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400292:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029a:	f022 0204 	bic.w	r2, r2, #4
  40029e:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a2:	f022 0204 	bic.w	r2, r2, #4
  4002a6:	675a      	str	r2, [r3, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002a8:	2202      	movs	r2, #2
  4002aa:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002ac:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002b2:	4945      	ldr	r1, [pc, #276]	; (4003c8 <system_board_init+0x174>)
  4002b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4002b8:	630a      	str	r2, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002ba:	610a      	str	r2, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002bc:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002c0:	630c      	str	r4, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002c2:	610c      	str	r4, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002c4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002c8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4002cc:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  4002ce:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002d2:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002d4:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002d6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4002da:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4002dc:	4308      	orrs	r0, r1
  4002de:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002e0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4002e2:	f020 50c0 	bic.w	r0, r0, #402653184	; 0x18000000
  4002e6:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002e8:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4002ee:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  4002f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002f4:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002f6:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002f8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4002fe:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  400302:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400304:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400306:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
  40030a:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40030c:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40030e:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  400310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400314:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400316:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40031c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40031e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400322:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400324:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400326:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40032a:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40032c:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  40032e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400332:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  400334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400338:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40033a:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40033c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400340:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400342:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400346:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400348:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40034a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40034e:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400350:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400352:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400356:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  400358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40035c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40035e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400364:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400366:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40036a:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40036c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40036e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400372:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400374:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400376:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40037a:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  40037c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400380:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400382:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  400388:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40038a:	4311      	orrs	r1, r2
  40038c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40038e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400390:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  400394:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400396:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400398:	f44f 7200 	mov.w	r2, #512	; 0x200
  40039c:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
		} else {
		base->PIO_PPDDR = mask;
  40039e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003a2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003a4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4003aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ac:	4311      	orrs	r1, r2
  4003ae:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003b0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003b2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  4003b6:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003b8:	605a      	str	r2, [r3, #4]
  4003ba:	bd38      	pop	{r3, r4, r5, pc}
  4003bc:	400e1450 	.word	0x400e1450
  4003c0:	004007a5 	.word	0x004007a5
  4003c4:	400e0e00 	.word	0x400e0e00
  4003c8:	400e1000 	.word	0x400e1000

004003cc <flexcom_enable>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4003cc:	4b54      	ldr	r3, [pc, #336]	; (400520 <flexcom_enable+0x154>)
  4003ce:	781b      	ldrb	r3, [r3, #0]
  4003d0:	2bff      	cmp	r3, #255	; 0xff
  4003d2:	d100      	bne.n	4003d6 <flexcom_enable+0xa>
  4003d4:	e7fe      	b.n	4003d4 <flexcom_enable+0x8>
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  4003d6:	b500      	push	{lr}
  4003d8:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003da:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003de:	fab3 f383 	clz	r3, r3
  4003e2:	095b      	lsrs	r3, r3, #5
  4003e4:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003e6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003ec:	2200      	movs	r2, #0
  4003ee:	4b4d      	ldr	r3, [pc, #308]	; (400524 <flexcom_enable+0x158>)
  4003f0:	701a      	strb	r2, [r3, #0]
	return flags;
  4003f2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4003f4:	4a4a      	ldr	r2, [pc, #296]	; (400520 <flexcom_enable+0x154>)
  4003f6:	7813      	ldrb	r3, [r2, #0]
  4003f8:	3301      	adds	r3, #1
  4003fa:	7013      	strb	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003fc:	b129      	cbz	r1, 40040a <flexcom_enable+0x3e>
		cpu_irq_enable();
  4003fe:	2201      	movs	r2, #1
  400400:	4b48      	ldr	r3, [pc, #288]	; (400524 <flexcom_enable+0x158>)
  400402:	701a      	strb	r2, [r3, #0]
  400404:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400408:	b662      	cpsie	i
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  40040a:	4a47      	ldr	r2, [pc, #284]	; (400528 <flexcom_enable+0x15c>)
  40040c:	4290      	cmp	r0, r2
  40040e:	d10d      	bne.n	40042c <flexcom_enable+0x60>
  400410:	2007      	movs	r0, #7
  400412:	4b46      	ldr	r3, [pc, #280]	; (40052c <flexcom_enable+0x160>)
  400414:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  400416:	2007      	movs	r0, #7
  400418:	4b45      	ldr	r3, [pc, #276]	; (400530 <flexcom_enable+0x164>)
  40041a:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40041c:	2100      	movs	r1, #0
  40041e:	2007      	movs	r0, #7
  400420:	4b44      	ldr	r3, [pc, #272]	; (400534 <flexcom_enable+0x168>)
  400422:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400424:	2007      	movs	r0, #7
  400426:	4b44      	ldr	r3, [pc, #272]	; (400538 <flexcom_enable+0x16c>)
  400428:	4798      	blx	r3
  40042a:	e075      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM6
	if (p_flexcom == FLEXCOM6) {
  40042c:	4a43      	ldr	r2, [pc, #268]	; (40053c <flexcom_enable+0x170>)
  40042e:	4290      	cmp	r0, r2
  400430:	d10d      	bne.n	40044e <flexcom_enable+0x82>
  400432:	2016      	movs	r0, #22
  400434:	4b3d      	ldr	r3, [pc, #244]	; (40052c <flexcom_enable+0x160>)
  400436:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  400438:	2007      	movs	r0, #7
  40043a:	4b3d      	ldr	r3, [pc, #244]	; (400530 <flexcom_enable+0x164>)
  40043c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  40043e:	2100      	movs	r1, #0
  400440:	2007      	movs	r0, #7
  400442:	4b3c      	ldr	r3, [pc, #240]	; (400534 <flexcom_enable+0x168>)
  400444:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400446:	2007      	movs	r0, #7
  400448:	4b3b      	ldr	r3, [pc, #236]	; (400538 <flexcom_enable+0x16c>)
  40044a:	4798      	blx	r3
  40044c:	e064      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM5
	if (p_flexcom == FLEXCOM5) {
  40044e:	4a3c      	ldr	r2, [pc, #240]	; (400540 <flexcom_enable+0x174>)
  400450:	4290      	cmp	r0, r2
  400452:	d10d      	bne.n	400470 <flexcom_enable+0xa4>
  400454:	2015      	movs	r0, #21
  400456:	4b35      	ldr	r3, [pc, #212]	; (40052c <flexcom_enable+0x160>)
  400458:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40045a:	2007      	movs	r0, #7
  40045c:	4b34      	ldr	r3, [pc, #208]	; (400530 <flexcom_enable+0x164>)
  40045e:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400460:	2100      	movs	r1, #0
  400462:	2007      	movs	r0, #7
  400464:	4b33      	ldr	r3, [pc, #204]	; (400534 <flexcom_enable+0x168>)
  400466:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  400468:	2007      	movs	r0, #7
  40046a:	4b33      	ldr	r3, [pc, #204]	; (400538 <flexcom_enable+0x16c>)
  40046c:	4798      	blx	r3
  40046e:	e053      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM4
	if (p_flexcom == FLEXCOM4) {
  400470:	4a34      	ldr	r2, [pc, #208]	; (400544 <flexcom_enable+0x178>)
  400472:	4290      	cmp	r0, r2
  400474:	d10d      	bne.n	400492 <flexcom_enable+0xc6>
  400476:	2014      	movs	r0, #20
  400478:	4b2c      	ldr	r3, [pc, #176]	; (40052c <flexcom_enable+0x160>)
  40047a:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  40047c:	2007      	movs	r0, #7
  40047e:	4b2c      	ldr	r3, [pc, #176]	; (400530 <flexcom_enable+0x164>)
  400480:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  400482:	2100      	movs	r1, #0
  400484:	2007      	movs	r0, #7
  400486:	4b2b      	ldr	r3, [pc, #172]	; (400534 <flexcom_enable+0x168>)
  400488:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  40048a:	2007      	movs	r0, #7
  40048c:	4b2a      	ldr	r3, [pc, #168]	; (400538 <flexcom_enable+0x16c>)
  40048e:	4798      	blx	r3
  400490:	e042      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM3
	if (p_flexcom == FLEXCOM3) {
  400492:	4a2d      	ldr	r2, [pc, #180]	; (400548 <flexcom_enable+0x17c>)
  400494:	4290      	cmp	r0, r2
  400496:	d10d      	bne.n	4004b4 <flexcom_enable+0xe8>
  400498:	2013      	movs	r0, #19
  40049a:	4b24      	ldr	r3, [pc, #144]	; (40052c <flexcom_enable+0x160>)
  40049c:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  40049e:	2006      	movs	r0, #6
  4004a0:	4b23      	ldr	r3, [pc, #140]	; (400530 <flexcom_enable+0x164>)
  4004a2:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004a4:	2100      	movs	r1, #0
  4004a6:	2006      	movs	r0, #6
  4004a8:	4b22      	ldr	r3, [pc, #136]	; (400534 <flexcom_enable+0x168>)
  4004aa:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4004ac:	2006      	movs	r0, #6
  4004ae:	4b22      	ldr	r3, [pc, #136]	; (400538 <flexcom_enable+0x16c>)
  4004b0:	4798      	blx	r3
  4004b2:	e031      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM2
	if (p_flexcom == FLEXCOM2) {
  4004b4:	4a25      	ldr	r2, [pc, #148]	; (40054c <flexcom_enable+0x180>)
  4004b6:	4290      	cmp	r0, r2
  4004b8:	d10d      	bne.n	4004d6 <flexcom_enable+0x10a>
  4004ba:	200e      	movs	r0, #14
  4004bc:	4b1b      	ldr	r3, [pc, #108]	; (40052c <flexcom_enable+0x160>)
  4004be:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004c0:	2006      	movs	r0, #6
  4004c2:	4b1b      	ldr	r3, [pc, #108]	; (400530 <flexcom_enable+0x164>)
  4004c4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004c6:	2100      	movs	r1, #0
  4004c8:	2006      	movs	r0, #6
  4004ca:	4b1a      	ldr	r3, [pc, #104]	; (400534 <flexcom_enable+0x168>)
  4004cc:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4004ce:	2006      	movs	r0, #6
  4004d0:	4b19      	ldr	r3, [pc, #100]	; (400538 <flexcom_enable+0x16c>)
  4004d2:	4798      	blx	r3
  4004d4:	e020      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM1
	if (p_flexcom == FLEXCOM1) {
  4004d6:	4a1e      	ldr	r2, [pc, #120]	; (400550 <flexcom_enable+0x184>)
  4004d8:	4290      	cmp	r0, r2
  4004da:	d10d      	bne.n	4004f8 <flexcom_enable+0x12c>
  4004dc:	2009      	movs	r0, #9
  4004de:	4b13      	ldr	r3, [pc, #76]	; (40052c <flexcom_enable+0x160>)
  4004e0:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  4004e2:	2006      	movs	r0, #6
  4004e4:	4b12      	ldr	r3, [pc, #72]	; (400530 <flexcom_enable+0x164>)
  4004e6:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  4004e8:	2100      	movs	r1, #0
  4004ea:	2006      	movs	r0, #6
  4004ec:	4b11      	ldr	r3, [pc, #68]	; (400534 <flexcom_enable+0x168>)
  4004ee:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  4004f0:	2006      	movs	r0, #6
  4004f2:	4b11      	ldr	r3, [pc, #68]	; (400538 <flexcom_enable+0x16c>)
  4004f4:	4798      	blx	r3
  4004f6:	e00f      	b.n	400518 <flexcom_enable+0x14c>
	} else
#endif
#ifdef ID_FLEXCOM0
	if (p_flexcom == FLEXCOM0) {
  4004f8:	4a16      	ldr	r2, [pc, #88]	; (400554 <flexcom_enable+0x188>)
  4004fa:	4290      	cmp	r0, r2
  4004fc:	d10c      	bne.n	400518 <flexcom_enable+0x14c>
  4004fe:	2008      	movs	r0, #8
  400500:	4b0a      	ldr	r3, [pc, #40]	; (40052c <flexcom_enable+0x160>)
  400502:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_6);
  400504:	2006      	movs	r0, #6
  400506:	4b0a      	ldr	r3, [pc, #40]	; (400530 <flexcom_enable+0x164>)
  400508:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40050a:	2100      	movs	r1, #0
  40050c:	2006      	movs	r0, #6
  40050e:	4b09      	ldr	r3, [pc, #36]	; (400534 <flexcom_enable+0x168>)
  400510:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  400512:	2006      	movs	r0, #6
  400514:	4b08      	ldr	r3, [pc, #32]	; (400538 <flexcom_enable+0x16c>)
  400516:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
  400518:	b003      	add	sp, #12
  40051a:	f85d fb04 	ldr.w	pc, [sp], #4
  40051e:	bf00      	nop
  400520:	20000504 	.word	0x20000504
  400524:	20000088 	.word	0x20000088
  400528:	40034000 	.word	0x40034000
  40052c:	004007a5 	.word	0x004007a5
  400530:	00400851 	.word	0x00400851
  400534:	004007f9 	.word	0x004007f9
  400538:	0040083d 	.word	0x0040083d
  40053c:	40040000 	.word	0x40040000
  400540:	40008000 	.word	0x40008000
  400544:	4001c000 	.word	0x4001c000
  400548:	40018000 	.word	0x40018000
  40054c:	40024000 	.word	0x40024000
  400550:	40020000 	.word	0x40020000
  400554:	4000c000 	.word	0x4000c000

00400558 <flexcom_set_opmode>:
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
	p_flexcom->FLEXCOM_MR = opmode;
  400558:	6001      	str	r1, [r0, #0]
  40055a:	4770      	bx	lr

0040055c <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40055c:	460b      	mov	r3, r1
  40055e:	b119      	cbz	r1, 400568 <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  400560:	6809      	ldr	r1, [r1, #0]
  400562:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  400564:	685b      	ldr	r3, [r3, #4]
  400566:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
  400568:	b11a      	cbz	r2, 400572 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  40056a:	6813      	ldr	r3, [r2, #0]
  40056c:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40056e:	6853      	ldr	r3, [r2, #4]
  400570:	61c3      	str	r3, [r0, #28]
  400572:	4770      	bx	lr

00400574 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  400574:	460b      	mov	r3, r1
  400576:	b119      	cbz	r1, 400580 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  400578:	6809      	ldr	r1, [r1, #0]
  40057a:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40057c:	685b      	ldr	r3, [r3, #4]
  40057e:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  400580:	b11a      	cbz	r2, 40058a <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  400582:	6813      	ldr	r3, [r2, #0]
  400584:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  400586:	6853      	ldr	r3, [r2, #4]
  400588:	6143      	str	r3, [r0, #20]
  40058a:	4770      	bx	lr

0040058c <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  40058c:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
  400590:	05c9      	lsls	r1, r1, #23
  400592:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  400594:	6201      	str	r1, [r0, #32]
  400596:	4770      	bx	lr

00400598 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  400598:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
  40059c:	f021 0101 	bic.w	r1, r1, #1
  4005a0:	0589      	lsls	r1, r1, #22
  4005a2:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
  4005a4:	6201      	str	r1, [r0, #32]
  4005a6:	4770      	bx	lr

004005a8 <PDMIC_Handler>:
 * \brief PDM Interrupt Handler
 *
 * \param[in]  pdm_num  PDMIC controller number
 */
static void PDMIC_Handler(uint8_t pdm_num)
{
  4005a8:	b510      	push	{r4, lr}
	struct pdm_instance *dev_inst = _pdm_instances[pdm_num];
  4005aa:	4b1e      	ldr	r3, [pc, #120]	; (400624 <PDMIC_Handler+0x7c>)
  4005ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	uint32_t isr = dev_inst->hw->PDMIC_ISR;
  4005b0:	6822      	ldr	r2, [r4, #0]
  4005b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
	/* All of the buffer done */
	if (isr & PDMIC_ISR_RXBUFF) {
  4005b4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4005b8:	d011      	beq.n	4005de <PDMIC_Handler+0x36>
		/* Disable PDC */
		dev_inst->hw->PDMIC_PTCR = (PDMIC_PTCR_RXTDIS);
  4005ba:	2302      	movs	r3, #2
  4005bc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
		/* Disable Interrupts */
		dev_inst->hw->PDMIC_IDR = 0xFFFFFFFF;
  4005c0:	6823      	ldr	r3, [r4, #0]
  4005c2:	f04f 32ff 	mov.w	r2, #4294967295
  4005c6:	61da      	str	r2, [r3, #28]
		/* Change job status */
		dev_inst->job_status = STATUS_OK;
  4005c8:	2300      	movs	r3, #0
  4005ca:	7523      	strb	r3, [r4, #20]
		/* Callback */
		if ((dev_inst->enabled_callbacks &
  4005cc:	6923      	ldr	r3, [r4, #16]
  4005ce:	f013 0f01 	tst.w	r3, #1
  4005d2:	d026      	beq.n	400622 <PDMIC_Handler+0x7a>
				(1 << PDM_CALLBACK_TRANSFER_END)) &&
				dev_inst->callbacks[PDM_CALLBACK_TRANSFER_END]) {
  4005d4:	6863      	ldr	r3, [r4, #4]
		dev_inst->hw->PDMIC_IDR = 0xFFFFFFFF;
		/* Change job status */
		dev_inst->job_status = STATUS_OK;
		/* Callback */
		if ((dev_inst->enabled_callbacks &
				(1 << PDM_CALLBACK_TRANSFER_END)) &&
  4005d6:	b323      	cbz	r3, 400622 <PDMIC_Handler+0x7a>
				dev_inst->callbacks[PDM_CALLBACK_TRANSFER_END]) {
			dev_inst->callbacks[PDM_CALLBACK_TRANSFER_END](dev_inst);
  4005d8:	4620      	mov	r0, r4
  4005da:	4798      	blx	r3
  4005dc:	bd10      	pop	{r4, pc}
		}
	}
	/* One of the buffer done */
	else if (isr & PDMIC_ISR_ENDRX) {
  4005de:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4005e2:	d013      	beq.n	40060c <PDMIC_Handler+0x64>
		/* Stop PDC (Pause and then start again after callback) */
		dev_inst->hw->PDMIC_PTCR = (PDMIC_PTCR_RXTDIS);
  4005e4:	2302      	movs	r3, #2
  4005e6:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
		/* Disable Interrupt */
		dev_inst->hw->PDMIC_IDR = PDMIC_IDR_ENDRX;
  4005ea:	6823      	ldr	r3, [r4, #0]
  4005ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4005f0:	61da      	str	r2, [r3, #28]
		/* Callback */
		if ((dev_inst->enabled_callbacks &
  4005f2:	6923      	ldr	r3, [r4, #16]
  4005f4:	f013 0f02 	tst.w	r3, #2
  4005f8:	d003      	beq.n	400602 <PDMIC_Handler+0x5a>
				(1 << PDM_CALLBACK_BUFFER_END)) &&
				dev_inst->callbacks[PDM_CALLBACK_BUFFER_END]) {
  4005fa:	68a3      	ldr	r3, [r4, #8]
		dev_inst->hw->PDMIC_PTCR = (PDMIC_PTCR_RXTDIS);
		/* Disable Interrupt */
		dev_inst->hw->PDMIC_IDR = PDMIC_IDR_ENDRX;
		/* Callback */
		if ((dev_inst->enabled_callbacks &
				(1 << PDM_CALLBACK_BUFFER_END)) &&
  4005fc:	b10b      	cbz	r3, 400602 <PDMIC_Handler+0x5a>
				dev_inst->callbacks[PDM_CALLBACK_BUFFER_END]) {
			dev_inst->callbacks[PDM_CALLBACK_BUFFER_END](dev_inst);
  4005fe:	4620      	mov	r0, r4
  400600:	4798      	blx	r3
		}

		/* Continue PDC */
		dev_inst->hw->PDMIC_PTCR = (PDMIC_PTCR_RXTEN);
  400602:	6823      	ldr	r3, [r4, #0]
  400604:	2201      	movs	r2, #1
  400606:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  40060a:	bd10      	pop	{r4, pc}
	}
	/* Over Run */
	else if (isr & PDMIC_ISR_OVRE) {
  40060c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400610:	d007      	beq.n	400622 <PDMIC_Handler+0x7a>
		/* Callback */
		if ((dev_inst->enabled_callbacks &
  400612:	6923      	ldr	r3, [r4, #16]
  400614:	f013 0f04 	tst.w	r3, #4
  400618:	d003      	beq.n	400622 <PDMIC_Handler+0x7a>
				(1 << PDM_CALLBACK_OVERRUN)) &&
				dev_inst->callbacks[PDM_CALLBACK_OVERRUN]) {
  40061a:	68e3      	ldr	r3, [r4, #12]
	}
	/* Over Run */
	else if (isr & PDMIC_ISR_OVRE) {
		/* Callback */
		if ((dev_inst->enabled_callbacks &
				(1 << PDM_CALLBACK_OVERRUN)) &&
  40061c:	b10b      	cbz	r3, 400622 <PDMIC_Handler+0x7a>
				dev_inst->callbacks[PDM_CALLBACK_OVERRUN]) {
			dev_inst->callbacks[PDM_CALLBACK_OVERRUN](dev_inst);
  40061e:	4620      	mov	r0, r4
  400620:	4798      	blx	r3
  400622:	bd10      	pop	{r4, pc}
  400624:	200004dc 	.word	0x200004dc

00400628 <PDMIC0_Handler>:

/**
 * \brief PDMIC 0 Interrupt Handler
 */
void PDMIC0_Handler(void)
{
  400628:	b508      	push	{r3, lr}
	PDMIC_Handler(0);
  40062a:	2000      	movs	r0, #0
  40062c:	4b01      	ldr	r3, [pc, #4]	; (400634 <PDMIC0_Handler+0xc>)
  40062e:	4798      	blx	r3
  400630:	bd08      	pop	{r3, pc}
  400632:	bf00      	nop
  400634:	004005a9 	.word	0x004005a9

00400638 <PDMIC1_Handler>:

/**
 * \brief PDMIC 1 Interrupt Handler
 */
void PDMIC1_Handler(void)
{
  400638:	b508      	push	{r3, lr}
	PDMIC_Handler(1);
  40063a:	2001      	movs	r0, #1
  40063c:	4b01      	ldr	r3, [pc, #4]	; (400644 <PDMIC1_Handler+0xc>)
  40063e:	4798      	blx	r3
  400640:	bd08      	pop	{r3, pc}
  400642:	bf00      	nop
  400644:	004005a9 	.word	0x004005a9

00400648 <pdm_init>:
 * \retval ERR_INVALID_ARG          Invalid argument(s) were provided
 * \retval ERR_BUSY                 The module is busy
 */
enum status_code pdm_init(struct pdm_instance *const dev_inst, Pdmic *hw,
		struct pdm_config *const cfg)
{
  400648:	b570      	push	{r4, r5, r6, lr}
  40064a:	4605      	mov	r5, r0
  40064c:	460e      	mov	r6, r1
  40064e:	4614      	mov	r4, r2
	Assert(dev_inst);
	Assert(hw);
	Assert(cfg);

	/* HW base init */
	dev_inst->hw = hw;
  400650:	6001      	str	r1, [r0, #0]

	hw->PDMIC_CR = PDMIC_CR_SWRST;
  400652:	2301      	movs	r3, #1
  400654:	600b      	str	r3, [r1, #0]

	/* Enable PMC clock */
	if (hw == PDMIC1) {
  400656:	4b1e      	ldr	r3, [pc, #120]	; (4006d0 <pdm_init+0x88>)
  400658:	4299      	cmp	r1, r3
  40065a:	d105      	bne.n	400668 <pdm_init+0x20>
  40065c:	2012      	movs	r0, #18
  40065e:	4b1d      	ldr	r3, [pc, #116]	; (4006d4 <pdm_init+0x8c>)
  400660:	4798      	blx	r3
		sysclk_enable_peripheral_clock(ID_PDMIC1);
		_pdm_instances[1] = dev_inst;
  400662:	4b1d      	ldr	r3, [pc, #116]	; (4006d8 <pdm_init+0x90>)
  400664:	605d      	str	r5, [r3, #4]
  400666:	e004      	b.n	400672 <pdm_init+0x2a>
  400668:	200d      	movs	r0, #13
  40066a:	4b1a      	ldr	r3, [pc, #104]	; (4006d4 <pdm_init+0x8c>)
  40066c:	4798      	blx	r3
	} else {
		sysclk_enable_peripheral_clock(ID_PDMIC0);
		_pdm_instances[0] = dev_inst;
  40066e:	4b1a      	ldr	r3, [pc, #104]	; (4006d8 <pdm_init+0x90>)
  400670:	601d      	str	r5, [r3, #0]
	}

	/* Set prescal */
	hw->PDMIC_MR = PDMIC_MR_PRESCAL(cfg->prescal);
  400672:	7823      	ldrb	r3, [r4, #0]
  400674:	021b      	lsls	r3, r3, #8
  400676:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
  40067a:	6073      	str	r3, [r6, #4]

	/* Initialize DSP0 */
	if (cfg->high_pass_filter_bypass) {
  40067c:	7863      	ldrb	r3, [r4, #1]
		dsp_cfg |= PDMIC_DSPR0_HPFBYP;
  40067e:	2b00      	cmp	r3, #0
  400680:	bf0c      	ite	eq
  400682:	2100      	moveq	r1, #0
  400684:	2102      	movne	r1, #2
	}

	if (cfg->sincc_filter_bypass) {
  400686:	78a3      	ldrb	r3, [r4, #2]
  400688:	b10b      	cbz	r3, 40068e <pdm_init+0x46>
		dsp_cfg |= PDMIC_DSPR0_SINBYP;
  40068a:	f041 0104 	orr.w	r1, r1, #4
	}

	if (cfg->conver_data_size) {
  40068e:	78e3      	ldrb	r3, [r4, #3]
  400690:	b10b      	cbz	r3, 400696 <pdm_init+0x4e>
		dsp_cfg |= PDMIC_DSPR0_SIZE;
  400692:	f041 0108 	orr.w	r1, r1, #8
	}

	if (cfg->oversampling_ratio) {
  400696:	7923      	ldrb	r3, [r4, #4]
  400698:	b10b      	cbz	r3, 40069e <pdm_init+0x56>
		dsp_cfg |= PDMIC_DSPR0_OSR_64;
  40069a:	f041 0110 	orr.w	r1, r1, #16
	} else {
		dsp_cfg |= PDMIC_DSPR0_OSR_128;
	}

	dsp_cfg |= PDMIC_DSPR0_SCALE(cfg->data_scale) |
  40069e:	7963      	ldrb	r3, [r4, #5]
  4006a0:	021b      	lsls	r3, r3, #8
  4006a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  4006a6:	79a2      	ldrb	r2, [r4, #6]
  4006a8:	0312      	lsls	r2, r2, #12
  4006aa:	b292      	uxth	r2, r2
  4006ac:	4313      	orrs	r3, r2
  4006ae:	430b      	orrs	r3, r1
			PDMIC_DSPR0_SHIFT(cfg->data_shift);
	hw->PDMIC_DSPR0 = dsp_cfg;
  4006b0:	65b3      	str	r3, [r6, #88]	; 0x58

	/* Set gain and offset */
	hw->PDMIC_DSPR1 = PDMIC_DSPR1_DGAIN(cfg->gain) |
  4006b2:	8923      	ldrh	r3, [r4, #8]
  4006b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4006b8:	8962      	ldrh	r2, [r4, #10]
  4006ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4006be:	65f3      	str	r3, [r6, #92]	; 0x5c
			PDMIC_DSPR1_OFFSET(cfg->offset);

	/* Initialize for Jobs */
	for (uint32_t i = 0; i < PDM_CALLBACK_N; i++) {
		dev_inst->callbacks[i] = NULL;
  4006c0:	2000      	movs	r0, #0
  4006c2:	6068      	str	r0, [r5, #4]
  4006c4:	60a8      	str	r0, [r5, #8]
  4006c6:	60e8      	str	r0, [r5, #12]
	}

	dev_inst->enabled_callbacks = 0;
  4006c8:	6128      	str	r0, [r5, #16]

	dev_inst->job_status = STATUS_OK;
  4006ca:	7528      	strb	r0, [r5, #20]

	return STATUS_OK;
}
  4006cc:	bd70      	pop	{r4, r5, r6, pc}
  4006ce:	bf00      	nop
  4006d0:	40030000 	.word	0x40030000
  4006d4:	004007a5 	.word	0x004007a5
  4006d8:	200004dc 	.word	0x200004dc

004006dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4006dc:	4a18      	ldr	r2, [pc, #96]	; (400740 <pmc_switch_mck_to_pllack+0x64>)
  4006de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006e4:	4318      	orrs	r0, r3
  4006e6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006ea:	f013 0f08 	tst.w	r3, #8
  4006ee:	d003      	beq.n	4006f8 <pmc_switch_mck_to_pllack+0x1c>
  4006f0:	e009      	b.n	400706 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006f2:	3b01      	subs	r3, #1
  4006f4:	d103      	bne.n	4006fe <pmc_switch_mck_to_pllack+0x22>
  4006f6:	e01e      	b.n	400736 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4006fc:	4910      	ldr	r1, [pc, #64]	; (400740 <pmc_switch_mck_to_pllack+0x64>)
  4006fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400700:	f012 0f08 	tst.w	r2, #8
  400704:	d0f5      	beq.n	4006f2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400706:	4a0e      	ldr	r2, [pc, #56]	; (400740 <pmc_switch_mck_to_pllack+0x64>)
  400708:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40070a:	f023 0303 	bic.w	r3, r3, #3
  40070e:	f043 0302 	orr.w	r3, r3, #2
  400712:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400714:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400716:	f010 0008 	ands.w	r0, r0, #8
  40071a:	d004      	beq.n	400726 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40071c:	2000      	movs	r0, #0
  40071e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400720:	3b01      	subs	r3, #1
  400722:	d103      	bne.n	40072c <pmc_switch_mck_to_pllack+0x50>
  400724:	e009      	b.n	40073a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400726:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40072a:	4905      	ldr	r1, [pc, #20]	; (400740 <pmc_switch_mck_to_pllack+0x64>)
  40072c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40072e:	f012 0f08 	tst.w	r2, #8
  400732:	d0f5      	beq.n	400720 <pmc_switch_mck_to_pllack+0x44>
  400734:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400736:	2001      	movs	r0, #1
  400738:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40073a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40073c:	4770      	bx	lr
  40073e:	bf00      	nop
  400740:	400e0400 	.word	0x400e0400

00400744 <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400744:	2801      	cmp	r0, #1
  400746:	d106      	bne.n	400756 <pmc_switch_sclk_to_32kxtal+0x12>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400748:	4a05      	ldr	r2, [pc, #20]	; (400760 <pmc_switch_sclk_to_32kxtal+0x1c>)
  40074a:	6893      	ldr	r3, [r2, #8]
  40074c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400754:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400756:	4a03      	ldr	r2, [pc, #12]	; (400764 <pmc_switch_sclk_to_32kxtal+0x20>)
  400758:	4b01      	ldr	r3, [pc, #4]	; (400760 <pmc_switch_sclk_to_32kxtal+0x1c>)
  40075a:	601a      	str	r2, [r3, #0]
  40075c:	4770      	bx	lr
  40075e:	bf00      	nop
  400760:	400e1410 	.word	0x400e1410
  400764:	a5000008 	.word	0xa5000008

00400768 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400768:	4b05      	ldr	r3, [pc, #20]	; (400780 <pmc_osc_is_ready_32kxtal+0x18>)
  40076a:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40076c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400770:	bf1d      	ittte	ne
  400772:	4b04      	ldrne	r3, [pc, #16]	; (400784 <pmc_osc_is_ready_32kxtal+0x1c>)
  400774:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  400776:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  40077a:	2000      	moveq	r0, #0
}
  40077c:	4770      	bx	lr
  40077e:	bf00      	nop
  400780:	400e1410 	.word	0x400e1410
  400784:	400e0400 	.word	0x400e0400

00400788 <pmc_disable_pllack>:
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  400788:	2200      	movs	r2, #0
  40078a:	4b01      	ldr	r3, [pc, #4]	; (400790 <pmc_disable_pllack+0x8>)
  40078c:	629a      	str	r2, [r3, #40]	; 0x28
  40078e:	4770      	bx	lr
  400790:	400e0400 	.word	0x400e0400

00400794 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400794:	4b02      	ldr	r3, [pc, #8]	; (4007a0 <pmc_is_locked_pllack+0xc>)
  400796:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400798:	f000 0002 	and.w	r0, r0, #2
  40079c:	4770      	bx	lr
  40079e:	bf00      	nop
  4007a0:	400e0400 	.word	0x400e0400

004007a4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4007a4:	2832      	cmp	r0, #50	; 0x32
  4007a6:	d81e      	bhi.n	4007e6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4007a8:	281f      	cmp	r0, #31
  4007aa:	d80c      	bhi.n	4007c6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4007ac:	4b11      	ldr	r3, [pc, #68]	; (4007f4 <pmc_enable_periph_clk+0x50>)
  4007ae:	699a      	ldr	r2, [r3, #24]
  4007b0:	2301      	movs	r3, #1
  4007b2:	4083      	lsls	r3, r0
  4007b4:	4393      	bics	r3, r2
  4007b6:	d018      	beq.n	4007ea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4007b8:	2301      	movs	r3, #1
  4007ba:	fa03 f000 	lsl.w	r0, r3, r0
  4007be:	4b0d      	ldr	r3, [pc, #52]	; (4007f4 <pmc_enable_periph_clk+0x50>)
  4007c0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007c2:	2000      	movs	r0, #0
  4007c4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4007c6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4007c8:	4b0a      	ldr	r3, [pc, #40]	; (4007f4 <pmc_enable_periph_clk+0x50>)
  4007ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4007ce:	2301      	movs	r3, #1
  4007d0:	4083      	lsls	r3, r0
  4007d2:	4393      	bics	r3, r2
  4007d4:	d00b      	beq.n	4007ee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4007d6:	2301      	movs	r3, #1
  4007d8:	fa03 f000 	lsl.w	r0, r3, r0
  4007dc:	4b05      	ldr	r3, [pc, #20]	; (4007f4 <pmc_enable_periph_clk+0x50>)
  4007de:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4007e2:	2000      	movs	r0, #0
  4007e4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4007e6:	2001      	movs	r0, #1
  4007e8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4007ea:	2000      	movs	r0, #0
  4007ec:	4770      	bx	lr
  4007ee:	2000      	movs	r0, #0
}
  4007f0:	4770      	bx	lr
  4007f2:	bf00      	nop
  4007f4:	400e0400 	.word	0x400e0400

004007f8 <pmc_switch_pck_to_mck>:
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  4007f8:	f041 0104 	orr.w	r1, r1, #4
  4007fc:	4b0e      	ldr	r3, [pc, #56]	; (400838 <pmc_switch_pck_to_mck+0x40>)
  4007fe:	f100 0210 	add.w	r2, r0, #16
  400802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400808:	f44f 7180 	mov.w	r1, #256	; 0x100
  40080c:	4081      	lsls	r1, r0
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  40080e:	ea13 0001 	ands.w	r0, r3, r1
  400812:	d004      	beq.n	40081e <pmc_switch_pck_to_mck+0x26>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400814:	2000      	movs	r0, #0
}
  400816:	4770      	bx	lr
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  400818:	3b01      	subs	r3, #1
  40081a:	d104      	bne.n	400826 <pmc_switch_pck_to_mck+0x2e>
  40081c:	e007      	b.n	40082e <pmc_switch_pck_to_mck+0x36>
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  40081e:	b410      	push	{r4}
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  400820:	f44f 6300 	mov.w	r3, #2048	; 0x800
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  400824:	4c04      	ldr	r4, [pc, #16]	; (400838 <pmc_switch_pck_to_mck+0x40>)
  400826:	6ea2      	ldr	r2, [r4, #104]	; 0x68
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
	for (ul_timeout = PMC_TIMEOUT;
  400828:	420a      	tst	r2, r1
  40082a:	d0f5      	beq.n	400818 <pmc_switch_pck_to_mck+0x20>
  40082c:	e000      	b.n	400830 <pmc_switch_pck_to_mck+0x38>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40082e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400830:	f85d 4b04 	ldr.w	r4, [sp], #4
  400834:	4770      	bx	lr
  400836:	bf00      	nop
  400838:	400e0400 	.word	0x400e0400

0040083c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  40083c:	f44f 7380 	mov.w	r3, #256	; 0x100
  400840:	fa03 f000 	lsl.w	r0, r3, r0
  400844:	4b01      	ldr	r3, [pc, #4]	; (40084c <pmc_enable_pck+0x10>)
  400846:	6018      	str	r0, [r3, #0]
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	400e0400 	.word	0x400e0400

00400850 <pmc_disable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  400850:	f44f 7380 	mov.w	r3, #256	; 0x100
  400854:	fa03 f000 	lsl.w	r0, r3, r0
  400858:	4b01      	ldr	r3, [pc, #4]	; (400860 <pmc_disable_pck+0x10>)
  40085a:	6058      	str	r0, [r3, #4]
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	400e0400 	.word	0x400e0400

00400864 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400864:	6843      	ldr	r3, [r0, #4]
  400866:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40086a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40086c:	6843      	ldr	r3, [r0, #4]
  40086e:	0409      	lsls	r1, r1, #16
  400870:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  400874:	430b      	orrs	r3, r1
  400876:	6043      	str	r3, [r0, #4]
  400878:	4770      	bx	lr
  40087a:	bf00      	nop

0040087c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40087c:	b132      	cbz	r2, 40088c <spi_set_clock_polarity+0x10>
  40087e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400882:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400884:	f043 0301 	orr.w	r3, r3, #1
  400888:	6303      	str	r3, [r0, #48]	; 0x30
  40088a:	4770      	bx	lr
  40088c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400890:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400892:	f023 0301 	bic.w	r3, r3, #1
  400896:	6303      	str	r3, [r0, #48]	; 0x30
  400898:	4770      	bx	lr
  40089a:	bf00      	nop

0040089c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40089c:	b132      	cbz	r2, 4008ac <spi_set_clock_phase+0x10>
  40089e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4008a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008a4:	f043 0302 	orr.w	r3, r3, #2
  4008a8:	6303      	str	r3, [r0, #48]	; 0x30
  4008aa:	4770      	bx	lr
  4008ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4008b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008b2:	f023 0302 	bic.w	r3, r3, #2
  4008b6:	6303      	str	r3, [r0, #48]	; 0x30
  4008b8:	4770      	bx	lr
  4008ba:	bf00      	nop

004008bc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4008bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4008c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4008c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4008c6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4008c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4008ca:	431a      	orrs	r2, r3
  4008cc:	630a      	str	r2, [r1, #48]	; 0x30
  4008ce:	4770      	bx	lr

004008d0 <supc_set_regulator_trim_user>:
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  4008d0:	69c2      	ldr	r2, [r0, #28]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  4008d2:	0249      	lsls	r1, r1, #9
  4008d4:	f401 51f0 	and.w	r1, r1, #7680	; 0x1e00
  4008d8:	f422 52f0 	bic.w	r2, r2, #7680	; 0x1e00
  4008dc:	f042 43b4 	orr.w	r3, r2, #1509949440	; 0x5a000000
  4008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4008e4:	430b      	orrs	r3, r1
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  4008e6:	61c3      	str	r3, [r0, #28]
  4008e8:	4770      	bx	lr
  4008ea:	bf00      	nop

004008ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4008ec:	e7fe      	b.n	4008ec <Dummy_Handler>
  4008ee:	bf00      	nop

004008f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4008f0:	b500      	push	{lr}
  4008f2:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4008f4:	4b2c      	ldr	r3, [pc, #176]	; (4009a8 <Reset_Handler+0xb8>)
  4008f6:	4a2d      	ldr	r2, [pc, #180]	; (4009ac <Reset_Handler+0xbc>)
  4008f8:	429a      	cmp	r2, r3
  4008fa:	d003      	beq.n	400904 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  4008fc:	4b2c      	ldr	r3, [pc, #176]	; (4009b0 <Reset_Handler+0xc0>)
  4008fe:	4a2a      	ldr	r2, [pc, #168]	; (4009a8 <Reset_Handler+0xb8>)
  400900:	429a      	cmp	r2, r3
  400902:	d304      	bcc.n	40090e <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400904:	4b2b      	ldr	r3, [pc, #172]	; (4009b4 <Reset_Handler+0xc4>)
  400906:	4a2c      	ldr	r2, [pc, #176]	; (4009b8 <Reset_Handler+0xc8>)
  400908:	429a      	cmp	r2, r3
  40090a:	d30f      	bcc.n	40092c <Reset_Handler+0x3c>
  40090c:	e01a      	b.n	400944 <Reset_Handler+0x54>
  40090e:	4926      	ldr	r1, [pc, #152]	; (4009a8 <Reset_Handler+0xb8>)
  400910:	4b2a      	ldr	r3, [pc, #168]	; (4009bc <Reset_Handler+0xcc>)
  400912:	1a5b      	subs	r3, r3, r1
  400914:	f023 0303 	bic.w	r3, r3, #3
  400918:	3304      	adds	r3, #4
  40091a:	4a24      	ldr	r2, [pc, #144]	; (4009ac <Reset_Handler+0xbc>)
  40091c:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40091e:	f852 0b04 	ldr.w	r0, [r2], #4
  400922:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400926:	429a      	cmp	r2, r3
  400928:	d1f9      	bne.n	40091e <Reset_Handler+0x2e>
  40092a:	e7eb      	b.n	400904 <Reset_Handler+0x14>
  40092c:	4b24      	ldr	r3, [pc, #144]	; (4009c0 <Reset_Handler+0xd0>)
  40092e:	4a25      	ldr	r2, [pc, #148]	; (4009c4 <Reset_Handler+0xd4>)
  400930:	1ad2      	subs	r2, r2, r3
  400932:	f022 0203 	bic.w	r2, r2, #3
  400936:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400938:	3b04      	subs	r3, #4
                *pDest++ = 0;
  40093a:	2100      	movs	r1, #0
  40093c:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400940:	4293      	cmp	r3, r2
  400942:	d1fb      	bne.n	40093c <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400944:	4a20      	ldr	r2, [pc, #128]	; (4009c8 <Reset_Handler+0xd8>)
  400946:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
  40094a:	4b20      	ldr	r3, [pc, #128]	; (4009cc <Reset_Handler+0xdc>)
  40094c:	6099      	str	r1, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40094e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400952:	fab3 f383 	clz	r3, r3
  400956:	095b      	lsrs	r3, r3, #5
  400958:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40095a:	b672      	cpsid	i
  40095c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400960:	2100      	movs	r1, #0
  400962:	4b1b      	ldr	r3, [pc, #108]	; (4009d0 <Reset_Handler+0xe0>)
  400964:	7019      	strb	r1, [r3, #0]
	return flags;
  400966:	9801      	ldr	r0, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400968:	491a      	ldr	r1, [pc, #104]	; (4009d4 <Reset_Handler+0xe4>)
  40096a:	680b      	ldr	r3, [r1, #0]
  40096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400970:	600b      	str	r3, [r1, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400972:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400976:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40097a:	b128      	cbz	r0, 400988 <Reset_Handler+0x98>
		cpu_irq_enable();
  40097c:	2101      	movs	r1, #1
  40097e:	4b14      	ldr	r3, [pc, #80]	; (4009d0 <Reset_Handler+0xe0>)
  400980:	7019      	strb	r1, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400982:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400986:	b662      	cpsie	i

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  400988:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  40098c:	f5b2 3f20 	cmp.w	r2, #163840	; 0x28000
  400990:	d204      	bcs.n	40099c <Reset_Handler+0xac>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  400992:	4a0e      	ldr	r2, [pc, #56]	; (4009cc <Reset_Handler+0xdc>)
  400994:	6893      	ldr	r3, [r2, #8]
  400996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40099a:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  40099c:	4b0e      	ldr	r3, [pc, #56]	; (4009d8 <Reset_Handler+0xe8>)
  40099e:	4798      	blx	r3

        /* Branch to main function */
        main();
  4009a0:	4b0e      	ldr	r3, [pc, #56]	; (4009dc <Reset_Handler+0xec>)
  4009a2:	4798      	blx	r3
  4009a4:	e7fe      	b.n	4009a4 <Reset_Handler+0xb4>
  4009a6:	bf00      	nop
  4009a8:	20000000 	.word	0x20000000
  4009ac:	00400ed0 	.word	0x00400ed0
  4009b0:	200004c0 	.word	0x200004c0
  4009b4:	20000514 	.word	0x20000514
  4009b8:	200004c0 	.word	0x200004c0
  4009bc:	200004bf 	.word	0x200004bf
  4009c0:	200004c4 	.word	0x200004c4
  4009c4:	20000517 	.word	0x20000517
  4009c8:	00400000 	.word	0x00400000
  4009cc:	e000ed00 	.word	0xe000ed00
  4009d0:	20000088 	.word	0x20000088
  4009d4:	e000ed88 	.word	0xe000ed88
  4009d8:	00400d69 	.word	0x00400d69
  4009dc:	00400c45 	.word	0x00400c45

004009e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4009e0:	4b31      	ldr	r3, [pc, #196]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  4009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009e4:	f003 0303 	and.w	r3, r3, #3
  4009e8:	2b01      	cmp	r3, #1
  4009ea:	d00f      	beq.n	400a0c <SystemCoreClockUpdate+0x2c>
  4009ec:	b113      	cbz	r3, 4009f4 <SystemCoreClockUpdate+0x14>
  4009ee:	2b02      	cmp	r3, #2
  4009f0:	d029      	beq.n	400a46 <SystemCoreClockUpdate+0x66>
  4009f2:	e042      	b.n	400a7a <SystemCoreClockUpdate+0x9a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4009f4:	4b2d      	ldr	r3, [pc, #180]	; (400aac <SystemCoreClockUpdate+0xcc>)
  4009f6:	695b      	ldr	r3, [r3, #20]
  4009f8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4009fc:	bf14      	ite	ne
  4009fe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a02:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a06:	4b2a      	ldr	r3, [pc, #168]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a08:	601a      	str	r2, [r3, #0]
  400a0a:	e036      	b.n	400a7a <SystemCoreClockUpdate+0x9a>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400a0c:	4b26      	ldr	r3, [pc, #152]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  400a0e:	6a1b      	ldr	r3, [r3, #32]
  400a10:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a14:	d003      	beq.n	400a1e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400a16:	4a27      	ldr	r2, [pc, #156]	; (400ab4 <SystemCoreClockUpdate+0xd4>)
  400a18:	4b25      	ldr	r3, [pc, #148]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a1a:	601a      	str	r2, [r3, #0]
  400a1c:	e02d      	b.n	400a7a <SystemCoreClockUpdate+0x9a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400a1e:	4a26      	ldr	r2, [pc, #152]	; (400ab8 <SystemCoreClockUpdate+0xd8>)
  400a20:	4b23      	ldr	r3, [pc, #140]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a22:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400a24:	4b20      	ldr	r3, [pc, #128]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  400a26:	6a1b      	ldr	r3, [r3, #32]
  400a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a2c:	2b10      	cmp	r3, #16
  400a2e:	d002      	beq.n	400a36 <SystemCoreClockUpdate+0x56>
  400a30:	2b20      	cmp	r3, #32
  400a32:	d004      	beq.n	400a3e <SystemCoreClockUpdate+0x5e>
  400a34:	e021      	b.n	400a7a <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_8_MHz:
				break;
			case CKGR_MOR_MOSCRCF_16_MHz:
				SystemCoreClock *= 2U;
  400a36:	4a21      	ldr	r2, [pc, #132]	; (400abc <SystemCoreClockUpdate+0xdc>)
  400a38:	4b1d      	ldr	r3, [pc, #116]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a3a:	601a      	str	r2, [r3, #0]
				break;
  400a3c:	e01d      	b.n	400a7a <SystemCoreClockUpdate+0x9a>
			case CKGR_MOR_MOSCRCF_24_MHz:
				SystemCoreClock *= 3U;
  400a3e:	4a20      	ldr	r2, [pc, #128]	; (400ac0 <SystemCoreClockUpdate+0xe0>)
  400a40:	4b1b      	ldr	r3, [pc, #108]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a42:	601a      	str	r2, [r3, #0]
				break;
  400a44:	e019      	b.n	400a7a <SystemCoreClockUpdate+0x9a>
				break;
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400a46:	4b19      	ldr	r3, [pc, #100]	; (400aac <SystemCoreClockUpdate+0xcc>)
  400a48:	695b      	ldr	r3, [r3, #20]
  400a4a:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a4e:	bf14      	ite	ne
  400a50:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a54:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a58:	4b15      	ldr	r3, [pc, #84]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a5a:	601a      	str	r2, [r3, #0]
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  400a5c:	4b12      	ldr	r3, [pc, #72]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  400a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a60:	f003 0303 	and.w	r3, r3, #3
  400a64:	2b02      	cmp	r3, #2
  400a66:	d108      	bne.n	400a7a <SystemCoreClockUpdate+0x9a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  400a68:	4b0f      	ldr	r3, [pc, #60]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  400a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400a6c:	4910      	ldr	r1, [pc, #64]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a6e:	f3c3 420c 	ubfx	r2, r3, #16, #13
  400a72:	680b      	ldr	r3, [r1, #0]
  400a74:	fb02 3303 	mla	r3, r2, r3, r3
  400a78:	600b      	str	r3, [r1, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400a7a:	4b0b      	ldr	r3, [pc, #44]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  400a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a82:	2b70      	cmp	r3, #112	; 0x70
  400a84:	d107      	bne.n	400a96 <SystemCoreClockUpdate+0xb6>
		SystemCoreClock /= 3U;
  400a86:	4a0a      	ldr	r2, [pc, #40]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a88:	6813      	ldr	r3, [r2, #0]
  400a8a:	490e      	ldr	r1, [pc, #56]	; (400ac4 <SystemCoreClockUpdate+0xe4>)
  400a8c:	fba1 1303 	umull	r1, r3, r1, r3
  400a90:	085b      	lsrs	r3, r3, #1
  400a92:	6013      	str	r3, [r2, #0]
  400a94:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a96:	4b04      	ldr	r3, [pc, #16]	; (400aa8 <SystemCoreClockUpdate+0xc8>)
  400a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a9a:	4905      	ldr	r1, [pc, #20]	; (400ab0 <SystemCoreClockUpdate+0xd0>)
  400a9c:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400aa0:	680b      	ldr	r3, [r1, #0]
  400aa2:	40d3      	lsrs	r3, r2
  400aa4:	600b      	str	r3, [r1, #0]
  400aa6:	4770      	bx	lr
  400aa8:	400e0400 	.word	0x400e0400
  400aac:	400e1410 	.word	0x400e1410
  400ab0:	2000008c 	.word	0x2000008c
  400ab4:	00b71b00 	.word	0x00b71b00
  400ab8:	007a1200 	.word	0x007a1200
  400abc:	00f42400 	.word	0x00f42400
  400ac0:	016e3600 	.word	0x016e3600
  400ac4:	aaaaaaab 	.word	0xaaaaaaab

00400ac8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400ac8:	4b12      	ldr	r3, [pc, #72]	; (400b14 <system_init_flash+0x4c>)
  400aca:	4298      	cmp	r0, r3
  400acc:	d804      	bhi.n	400ad8 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ace:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400ad2:	4b11      	ldr	r3, [pc, #68]	; (400b18 <system_init_flash+0x50>)
  400ad4:	601a      	str	r2, [r3, #0]
  400ad6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  400ad8:	4b10      	ldr	r3, [pc, #64]	; (400b1c <system_init_flash+0x54>)
  400ada:	4298      	cmp	r0, r3
  400adc:	d803      	bhi.n	400ae6 <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ade:	4a10      	ldr	r2, [pc, #64]	; (400b20 <system_init_flash+0x58>)
  400ae0:	4b0d      	ldr	r3, [pc, #52]	; (400b18 <system_init_flash+0x50>)
  400ae2:	601a      	str	r2, [r3, #0]
  400ae4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  400ae6:	4b0f      	ldr	r3, [pc, #60]	; (400b24 <system_init_flash+0x5c>)
  400ae8:	4298      	cmp	r0, r3
  400aea:	d803      	bhi.n	400af4 <system_init_flash+0x2c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400aec:	4a0e      	ldr	r2, [pc, #56]	; (400b28 <system_init_flash+0x60>)
  400aee:	4b0a      	ldr	r3, [pc, #40]	; (400b18 <system_init_flash+0x50>)
  400af0:	601a      	str	r2, [r3, #0]
  400af2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  400af4:	4b0d      	ldr	r3, [pc, #52]	; (400b2c <system_init_flash+0x64>)
  400af6:	4298      	cmp	r0, r3
  400af8:	d803      	bhi.n	400b02 <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400afa:	4a0d      	ldr	r2, [pc, #52]	; (400b30 <system_init_flash+0x68>)
  400afc:	4b06      	ldr	r3, [pc, #24]	; (400b18 <system_init_flash+0x50>)
  400afe:	601a      	str	r2, [r3, #0]
  400b00:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  400b02:	4b0c      	ldr	r3, [pc, #48]	; (400b34 <system_init_flash+0x6c>)
  400b04:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b06:	bf94      	ite	ls
  400b08:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b0c:	4a0a      	ldrhi	r2, [pc, #40]	; (400b38 <system_init_flash+0x70>)
  400b0e:	4b02      	ldr	r3, [pc, #8]	; (400b18 <system_init_flash+0x50>)
  400b10:	601a      	str	r2, [r3, #0]
  400b12:	4770      	bx	lr
  400b14:	01312cff 	.word	0x01312cff
  400b18:	400e0a00 	.word	0x400e0a00
  400b1c:	026259ff 	.word	0x026259ff
  400b20:	04000100 	.word	0x04000100
  400b24:	039386ff 	.word	0x039386ff
  400b28:	04000200 	.word	0x04000200
  400b2c:	04c4b3ff 	.word	0x04c4b3ff
  400b30:	04000300 	.word	0x04000300
  400b34:	05f5e0ff 	.word	0x05f5e0ff
  400b38:	04000500 	.word	0x04000500

00400b3c <spi_slave_transfer>:
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer. 
 */
static void spi_slave_transfer(void *p_tbuf, uint32_t tsize, void *p_rbuf,
		uint32_t rsize)
{
  400b3c:	b570      	push	{r4, r5, r6, lr}
  400b3e:	b082      	sub	sp, #8
  400b40:	4606      	mov	r6, r0
  400b42:	460d      	mov	r5, r1
	uint32_t spi_ier;
	pdc_packet_t pdc_spi_packet;

	pdc_spi_packet.ul_addr = (uint32_t)p_rbuf;
  400b44:	9200      	str	r2, [sp, #0]
	pdc_spi_packet.ul_size = rsize;
  400b46:	9301      	str	r3, [sp, #4]
	pdc_rx_init(g_p_spis_pdc, &pdc_spi_packet, NULL);
  400b48:	4c0b      	ldr	r4, [pc, #44]	; (400b78 <spi_slave_transfer+0x3c>)
  400b4a:	2200      	movs	r2, #0
  400b4c:	4669      	mov	r1, sp
  400b4e:	6820      	ldr	r0, [r4, #0]
  400b50:	4b0a      	ldr	r3, [pc, #40]	; (400b7c <spi_slave_transfer+0x40>)
  400b52:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)p_tbuf;
  400b54:	9600      	str	r6, [sp, #0]
	pdc_spi_packet.ul_size = tsize;
  400b56:	9501      	str	r5, [sp, #4]
	pdc_tx_init(g_p_spis_pdc, &pdc_spi_packet, NULL);
  400b58:	2200      	movs	r2, #0
  400b5a:	4669      	mov	r1, sp
  400b5c:	6820      	ldr	r0, [r4, #0]
  400b5e:	4b08      	ldr	r3, [pc, #32]	; (400b80 <spi_slave_transfer+0x44>)
  400b60:	4798      	blx	r3
	
	/* Enable the RX and TX PDC transfer requests */
	//pdc_enable_transfer(g_p_spis_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
	pdc_enable_transfer(g_p_spis_pdc, PERIPH_PTCR_TXTEN);
  400b62:	f44f 7180 	mov.w	r1, #256	; 0x100
  400b66:	6820      	ldr	r0, [r4, #0]
  400b68:	4b06      	ldr	r3, [pc, #24]	; (400b84 <spi_slave_transfer+0x48>)
  400b6a:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b70:	4b05      	ldr	r3, [pc, #20]	; (400b88 <spi_slave_transfer+0x4c>)
  400b72:	615a      	str	r2, [r3, #20]

	/* Transfer done handler is in ISR */
	spi_ier = SPI_IER_NSSR;// | SPI_IER_RXBUFF;;
	spi_enable_interrupt(SPI_SLAVE_BASE, spi_ier) ;
}
  400b74:	b002      	add	sp, #8
  400b76:	bd70      	pop	{r4, r5, r6, pc}
  400b78:	2000050c 	.word	0x2000050c
  400b7c:	00400575 	.word	0x00400575
  400b80:	0040055d 	.word	0x0040055d
  400b84:	0040058d 	.word	0x0040058d
  400b88:	40008400 	.word	0x40008400

00400b8c <init_pdm>:
//static uint8_t buffer_index = 0;


/* Function to setup the PDM module */
void init_pdm(void)
{
  400b8c:	b500      	push	{lr}
  400b8e:	b085      	sub	sp, #20
 */
__always_inline static void pdm_get_config_default(struct pdm_config *const cfg)
{
	Assert(cfg);
	cfg->prescal = PDM_DEFAULT_PRESCAL;
	cfg->high_pass_filter_bypass = false;
  400b90:	2300      	movs	r3, #0
  400b92:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg->sincc_filter_bypass = false;
  400b96:	f88d 3006 	strb.w	r3, [sp, #6]
	cfg->conver_data_size = PDMIC_CONVERTED_DATA_SIZE_16;
  400b9a:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg->oversampling_ratio = PDMIC_OVERSAMPLING_RATIO_128;
	cfg->data_scale = 0;
  400b9e:	f88d 3009 	strb.w	r3, [sp, #9]
	cfg->data_shift = 0;
  400ba2:	f88d 300a 	strb.w	r3, [sp, #10]
	cfg->gain = 1;
  400ba6:	2201      	movs	r2, #1
  400ba8:	f8ad 200c 	strh.w	r2, [sp, #12]
	cfg->offset = 0;
  400bac:	f8ad 300e 	strh.w	r3, [sp, #14]
	/* PDM configuration structure / PDM Interface Controller 0 - */
	struct pdm_config conf_pdmic0;
	/* Get default configuration */
	pdm_get_config_default(&conf_pdmic0);
	/* Prescaler for 1 MHz PDM clock */
	conf_pdmic0.prescal = PDM_PRESCALER;
  400bb0:	2312      	movs	r3, #18
  400bb2:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Set gain to 1 - if not, all conversions are 0 */
	conf_pdmic0.gain = 1;
	/* Oversampling ratio */
	conf_pdmic0.oversampling_ratio = PDMIC_OVERSAMPLING_RATIO_64;
  400bb6:	f88d 2008 	strb.w	r2, [sp, #8]
	/* Data size */
	conf_pdmic0.conver_data_size = PDMIC_CONVERTED_DATA_SIZE_16;
	/* Initialize PDMIC0 with configuration */
	pdm_init(&pdm0, PDMIC0, &conf_pdmic0);	
  400bba:	aa01      	add	r2, sp, #4
  400bbc:	4908      	ldr	r1, [pc, #32]	; (400be0 <init_pdm+0x54>)
  400bbe:	4809      	ldr	r0, [pc, #36]	; (400be4 <init_pdm+0x58>)
  400bc0:	4b09      	ldr	r3, [pc, #36]	; (400be8 <init_pdm+0x5c>)
  400bc2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400bc4:	4b09      	ldr	r3, [pc, #36]	; (400bec <init_pdm+0x60>)
  400bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400bce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400bd2:	2120      	movs	r1, #32
  400bd4:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400bd8:	601a      	str	r2, [r3, #0]
	// 	NVIC_SetPriority(PDMIC1_IRQn, 0);
	// 	NVIC_EnableIRQ(PDMIC1_IRQn);	
	pdm_enable_interrupt(&pdm0, PDMIC_INTERRUPT_SRC_DATA_READY);
	//	pdm_enable_interrupt(&pdm1, PDMIC_INTERRUPT_SRC_DATA_READY);
*/	
}
  400bda:	b005      	add	sp, #20
  400bdc:	f85d fb04 	ldr.w	pc, [sp], #4
  400be0:	4002c000 	.word	0x4002c000
  400be4:	200004e8 	.word	0x200004e8
  400be8:	00400649 	.word	0x00400649
  400bec:	e000e100 	.word	0xe000e100

00400bf0 <enable_pdm>:
{
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(dev_inst->hw);

	dev_inst->hw->PDMIC_CR = PDMIC_CR_ENPDM;
  400bf0:	4b02      	ldr	r3, [pc, #8]	; (400bfc <enable_pdm+0xc>)
  400bf2:	681b      	ldr	r3, [r3, #0]
  400bf4:	2210      	movs	r2, #16
  400bf6:	601a      	str	r2, [r3, #0]
  400bf8:	4770      	bx	lr
  400bfa:	bf00      	nop
  400bfc:	200004e8 	.word	0x200004e8

00400c00 <FLEXCOM5_Handler>:
{
	uint32_t status;
	static volatile int16_t pdm0_data = 0;
	
	static int16_t test_data = 32767;
	gs_uc_spi_s_tbuffer[0] = (uint8_t) (test_data>>8);
  400c00:	4a0b      	ldr	r2, [pc, #44]	; (400c30 <FLEXCOM5_Handler+0x30>)
  400c02:	f9b2 3000 	ldrsh.w	r3, [r2]
  400c06:	490b      	ldr	r1, [pc, #44]	; (400c34 <FLEXCOM5_Handler+0x34>)
  400c08:	1218      	asrs	r0, r3, #8
  400c0a:	7008      	strb	r0, [r1, #0]
	gs_uc_spi_s_tbuffer[1] = (uint8_t) (test_data);
  400c0c:	704b      	strb	r3, [r1, #1]
	test_data--;	
  400c0e:	3b01      	subs	r3, #1
  400c10:	8013      	strh	r3, [r2, #0]
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
  400c12:	4b09      	ldr	r3, [pc, #36]	; (400c38 <FLEXCOM5_Handler+0x38>)
  400c14:	691b      	ldr	r3, [r3, #16]
	//usart_pdc_buffer[current_usart_buffer][0] = (uint8_t) (dataForTest);
	//usart_pdc_buffer[current_usart_buffer][1] = (uint8_t) (dataForTest >> 8);
		
	status = spi_read_status(SPI_SLAVE_BASE) ;

	if(status & SPI_SR_NSSR) {
  400c16:	f413 7f80 	tst.w	r3, #256	; 0x100
  400c1a:	d007      	beq.n	400c2c <FLEXCOM5_Handler+0x2c>

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
  400c1c:	b510      	push	{r4, lr}
		////pdm0_data_rdy = true;
		//gs_uc_spi_s_tbuffer[1] = (uint8_t)(pdm0_data);
		//gs_uc_spi_s_tbuffer[0] = (uint8_t)(pdm0_data >> 8);
		
		//if ( status & SPI_SR_RXBUFF ) {
			spi_slave_transfer(gs_uc_spi_s_tbuffer, COMM_BUFFER_SIZE,
  400c1e:	2302      	movs	r3, #2
  400c20:	4a06      	ldr	r2, [pc, #24]	; (400c3c <FLEXCOM5_Handler+0x3c>)
  400c22:	4619      	mov	r1, r3
  400c24:	4803      	ldr	r0, [pc, #12]	; (400c34 <FLEXCOM5_Handler+0x34>)
  400c26:	4c06      	ldr	r4, [pc, #24]	; (400c40 <FLEXCOM5_Handler+0x40>)
  400c28:	47a0      	blx	r4
  400c2a:	bd10      	pop	{r4, pc}
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop
  400c30:	20000090 	.word	0x20000090
  400c34:	20000500 	.word	0x20000500
  400c38:	40008400 	.word	0x40008400
  400c3c:	200004e4 	.word	0x200004e4
  400c40:	00400b3d 	.word	0x00400b3d

00400c44 <main>:
 * \brief Application entry point for SPI PDC example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	//uint8_t uc_key;
	uint32_t i;

	/* Initialize the SAM system. */
	sysclk_init();
  400c48:	4b32      	ldr	r3, [pc, #200]	; (400d14 <main+0xd0>)
  400c4a:	4798      	blx	r3
	board_init();
  400c4c:	4b32      	ldr	r3, [pc, #200]	; (400d18 <main+0xd4>)
  400c4e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400c50:	4b32      	ldr	r3, [pc, #200]	; (400d1c <main+0xd8>)
  400c52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400c5a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400c5e:	2500      	movs	r5, #0
  400c60:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c64:	601a      	str	r2, [r3, #0]
static void spi_slave_initialize(void)
{
	uint32_t i;

	/* Get pointer to SPI slave PDC register base */
	g_p_spis_pdc = spi_get_pdc_base(SPI_MASTER_BASE);
  400c66:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 400d64 <main+0x120>
  400c6a:	4b2d      	ldr	r3, [pc, #180]	; (400d20 <main+0xdc>)
  400c6c:	f8c9 3000 	str.w	r3, [r9]
	
	//puts("-I- Initialize SPI as slave \r");

	for (i = 0; i < COMM_BUFFER_SIZE; i++) {
		gs_uc_spi_s_tbuffer[i] = i;
  400c70:	4f2c      	ldr	r7, [pc, #176]	; (400d24 <main+0xe0>)
  400c72:	703d      	strb	r5, [r7, #0]
  400c74:	2601      	movs	r6, #1
  400c76:	707e      	strb	r6, [r7, #1]
	}
	
#if (SAMG55)
	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(BOARD_FLEXCOM_SPI);
  400c78:	4c2b      	ldr	r4, [pc, #172]	; (400d28 <main+0xe4>)
  400c7a:	4620      	mov	r0, r4
  400c7c:	4b2b      	ldr	r3, [pc, #172]	; (400d2c <main+0xe8>)
  400c7e:	4798      	blx	r3
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
  400c80:	2102      	movs	r1, #2
  400c82:	4620      	mov	r0, r4
  400c84:	4b2a      	ldr	r3, [pc, #168]	; (400d30 <main+0xec>)
  400c86:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400c88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  400c8c:	f04f 0802 	mov.w	r8, #2
  400c90:	f8c4 8000 	str.w	r8, [r4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400c94:	2380      	movs	r3, #128	; 0x80
  400c96:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  400c98:	6863      	ldr	r3, [r4, #4]
  400c9a:	f023 0301 	bic.w	r3, r3, #1
  400c9e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400ca0:	6863      	ldr	r3, [r4, #4]
  400ca2:	f043 0310 	orr.w	r3, r3, #16
  400ca6:	6063      	str	r3, [r4, #4]
#endif
	spi_disable(SPI_SLAVE_BASE);
	spi_reset(SPI_SLAVE_BASE);
	spi_set_slave_mode(SPI_SLAVE_BASE);
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_SEL);
  400ca8:	4629      	mov	r1, r5
  400caa:	4620      	mov	r0, r4
  400cac:	4b21      	ldr	r3, [pc, #132]	; (400d34 <main+0xf0>)
  400cae:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400cb0:	462a      	mov	r2, r5
  400cb2:	4629      	mov	r1, r5
  400cb4:	4620      	mov	r0, r4
  400cb6:	4b20      	ldr	r3, [pc, #128]	; (400d38 <main+0xf4>)
  400cb8:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400cba:	4632      	mov	r2, r6
  400cbc:	4629      	mov	r1, r5
  400cbe:	4620      	mov	r0, r4
  400cc0:	4b1e      	ldr	r3, [pc, #120]	; (400d3c <main+0xf8>)
  400cc2:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL,
  400cc4:	462a      	mov	r2, r5
  400cc6:	4629      	mov	r1, r5
  400cc8:	4620      	mov	r0, r4
  400cca:	4b1d      	ldr	r3, [pc, #116]	; (400d40 <main+0xfc>)
  400ccc:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400cce:	6026      	str	r6, [r4, #0]
			SPI_CSR_BITS_8_BIT);
	spi_enable(SPI_SLAVE_BASE);
	
	pdc_disable_transfer(g_p_spis_pdc, PERIPH_PTCR_RXTDIS |
  400cd0:	f240 2102 	movw	r1, #514	; 0x202
  400cd4:	f8d9 0000 	ldr.w	r0, [r9]
  400cd8:	4b1a      	ldr	r3, [pc, #104]	; (400d44 <main+0x100>)
  400cda:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
	spi_slave_transfer(gs_uc_spi_s_tbuffer, COMM_BUFFER_SIZE,
  400cdc:	4643      	mov	r3, r8
  400cde:	4a1a      	ldr	r2, [pc, #104]	; (400d48 <main+0x104>)
  400ce0:	4641      	mov	r1, r8
  400ce2:	4638      	mov	r0, r7
  400ce4:	4c19      	ldr	r4, [pc, #100]	; (400d4c <main+0x108>)
  400ce6:	47a0      	blx	r4
	NVIC_ClearPendingIRQ(SPI_IRQn);
	NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);

	spi_slave_initialize();
	init_pdm();
  400ce8:	4b19      	ldr	r3, [pc, #100]	; (400d50 <main+0x10c>)
  400cea:	4798      	blx	r3
	
	Enable_global_interrupt();
  400cec:	4b19      	ldr	r3, [pc, #100]	; (400d54 <main+0x110>)
  400cee:	701e      	strb	r6, [r3, #0]
  400cf0:	f3bf 8f5f 	dmb	sy
  400cf4:	b662      	cpsie	i
	enable_pdm();
  400cf6:	4b18      	ldr	r3, [pc, #96]	; (400d58 <main+0x114>)
  400cf8:	4798      	blx	r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400cfa:	4a18      	ldr	r2, [pc, #96]	; (400d5c <main+0x118>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  400cfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400d00:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  400d02:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
		port->PIO_CODR = mask;
  400d06:	bf14      	ite	ne
  400d08:	6351      	strne	r1, [r2, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400d0a:	6311      	streq	r1, [r2, #48]	; 0x30
 * \brief Application entry point for SPI PDC example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400d0c:	4b14      	ldr	r3, [pc, #80]	; (400d60 <main+0x11c>)
			//}
			//break;
		//}
		
		ioport_toggle_pin_level(LED_1_PIN);
		for (i=0; i<12000000; i++)
  400d0e:	3b01      	subs	r3, #1
  400d10:	d1fd      	bne.n	400d0e <main+0xca>
  400d12:	e7f5      	b.n	400d00 <main+0xbc>
  400d14:	004001a5 	.word	0x004001a5
  400d18:	00400255 	.word	0x00400255
  400d1c:	e000e100 	.word	0xe000e100
  400d20:	40008500 	.word	0x40008500
  400d24:	20000500 	.word	0x20000500
  400d28:	40008000 	.word	0x40008000
  400d2c:	004003cd 	.word	0x004003cd
  400d30:	00400559 	.word	0x00400559
  400d34:	00400865 	.word	0x00400865
  400d38:	0040087d 	.word	0x0040087d
  400d3c:	0040089d 	.word	0x0040089d
  400d40:	004008bd 	.word	0x004008bd
  400d44:	00400599 	.word	0x00400599
  400d48:	200004e4 	.word	0x200004e4
  400d4c:	00400b3d 	.word	0x00400b3d
  400d50:	00400b8d 	.word	0x00400b8d
  400d54:	20000088 	.word	0x20000088
  400d58:	00400bf1 	.word	0x00400bf1
  400d5c:	400e0e00 	.word	0x400e0e00
  400d60:	00b71b00 	.word	0x00b71b00
  400d64:	2000050c 	.word	0x2000050c

00400d68 <__libc_init_array>:
  400d68:	b570      	push	{r4, r5, r6, lr}
  400d6a:	4e0f      	ldr	r6, [pc, #60]	; (400da8 <__libc_init_array+0x40>)
  400d6c:	4d0f      	ldr	r5, [pc, #60]	; (400dac <__libc_init_array+0x44>)
  400d6e:	1b76      	subs	r6, r6, r5
  400d70:	10b6      	asrs	r6, r6, #2
  400d72:	bf18      	it	ne
  400d74:	2400      	movne	r4, #0
  400d76:	d005      	beq.n	400d84 <__libc_init_array+0x1c>
  400d78:	3401      	adds	r4, #1
  400d7a:	f855 3b04 	ldr.w	r3, [r5], #4
  400d7e:	4798      	blx	r3
  400d80:	42a6      	cmp	r6, r4
  400d82:	d1f9      	bne.n	400d78 <__libc_init_array+0x10>
  400d84:	4e0a      	ldr	r6, [pc, #40]	; (400db0 <__libc_init_array+0x48>)
  400d86:	4d0b      	ldr	r5, [pc, #44]	; (400db4 <__libc_init_array+0x4c>)
  400d88:	1b76      	subs	r6, r6, r5
  400d8a:	f000 f88f 	bl	400eac <_init>
  400d8e:	10b6      	asrs	r6, r6, #2
  400d90:	bf18      	it	ne
  400d92:	2400      	movne	r4, #0
  400d94:	d006      	beq.n	400da4 <__libc_init_array+0x3c>
  400d96:	3401      	adds	r4, #1
  400d98:	f855 3b04 	ldr.w	r3, [r5], #4
  400d9c:	4798      	blx	r3
  400d9e:	42a6      	cmp	r6, r4
  400da0:	d1f9      	bne.n	400d96 <__libc_init_array+0x2e>
  400da2:	bd70      	pop	{r4, r5, r6, pc}
  400da4:	bd70      	pop	{r4, r5, r6, pc}
  400da6:	bf00      	nop
  400da8:	00400eb8 	.word	0x00400eb8
  400dac:	00400eb8 	.word	0x00400eb8
  400db0:	00400ec0 	.word	0x00400ec0
  400db4:	00400eb8 	.word	0x00400eb8

00400db8 <register_fini>:
  400db8:	4b02      	ldr	r3, [pc, #8]	; (400dc4 <register_fini+0xc>)
  400dba:	b113      	cbz	r3, 400dc2 <register_fini+0xa>
  400dbc:	4802      	ldr	r0, [pc, #8]	; (400dc8 <register_fini+0x10>)
  400dbe:	f000 b805 	b.w	400dcc <atexit>
  400dc2:	4770      	bx	lr
  400dc4:	00000000 	.word	0x00000000
  400dc8:	00400dd9 	.word	0x00400dd9

00400dcc <atexit>:
  400dcc:	2300      	movs	r3, #0
  400dce:	4601      	mov	r1, r0
  400dd0:	461a      	mov	r2, r3
  400dd2:	4618      	mov	r0, r3
  400dd4:	f000 b814 	b.w	400e00 <__register_exitproc>

00400dd8 <__libc_fini_array>:
  400dd8:	b538      	push	{r3, r4, r5, lr}
  400dda:	4d07      	ldr	r5, [pc, #28]	; (400df8 <__libc_fini_array+0x20>)
  400ddc:	4c07      	ldr	r4, [pc, #28]	; (400dfc <__libc_fini_array+0x24>)
  400dde:	1b2c      	subs	r4, r5, r4
  400de0:	10a4      	asrs	r4, r4, #2
  400de2:	d005      	beq.n	400df0 <__libc_fini_array+0x18>
  400de4:	3c01      	subs	r4, #1
  400de6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400dea:	4798      	blx	r3
  400dec:	2c00      	cmp	r4, #0
  400dee:	d1f9      	bne.n	400de4 <__libc_fini_array+0xc>
  400df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400df4:	f000 b864 	b.w	400ec0 <_fini>
  400df8:	00400ed0 	.word	0x00400ed0
  400dfc:	00400ecc 	.word	0x00400ecc

00400e00 <__register_exitproc>:
  400e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e04:	4c25      	ldr	r4, [pc, #148]	; (400e9c <__register_exitproc+0x9c>)
  400e06:	6825      	ldr	r5, [r4, #0]
  400e08:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400e0c:	4606      	mov	r6, r0
  400e0e:	4688      	mov	r8, r1
  400e10:	4692      	mov	sl, r2
  400e12:	4699      	mov	r9, r3
  400e14:	b3c4      	cbz	r4, 400e88 <__register_exitproc+0x88>
  400e16:	6860      	ldr	r0, [r4, #4]
  400e18:	281f      	cmp	r0, #31
  400e1a:	dc17      	bgt.n	400e4c <__register_exitproc+0x4c>
  400e1c:	1c43      	adds	r3, r0, #1
  400e1e:	b176      	cbz	r6, 400e3e <__register_exitproc+0x3e>
  400e20:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400e24:	2201      	movs	r2, #1
  400e26:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400e2a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400e2e:	4082      	lsls	r2, r0
  400e30:	4311      	orrs	r1, r2
  400e32:	2e02      	cmp	r6, #2
  400e34:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400e38:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400e3c:	d01e      	beq.n	400e7c <__register_exitproc+0x7c>
  400e3e:	3002      	adds	r0, #2
  400e40:	6063      	str	r3, [r4, #4]
  400e42:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400e46:	2000      	movs	r0, #0
  400e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e4c:	4b14      	ldr	r3, [pc, #80]	; (400ea0 <__register_exitproc+0xa0>)
  400e4e:	b303      	cbz	r3, 400e92 <__register_exitproc+0x92>
  400e50:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400e54:	f3af 8000 	nop.w
  400e58:	4604      	mov	r4, r0
  400e5a:	b1d0      	cbz	r0, 400e92 <__register_exitproc+0x92>
  400e5c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400e60:	2700      	movs	r7, #0
  400e62:	e880 0088 	stmia.w	r0, {r3, r7}
  400e66:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400e6a:	4638      	mov	r0, r7
  400e6c:	2301      	movs	r3, #1
  400e6e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400e72:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400e76:	2e00      	cmp	r6, #0
  400e78:	d0e1      	beq.n	400e3e <__register_exitproc+0x3e>
  400e7a:	e7d1      	b.n	400e20 <__register_exitproc+0x20>
  400e7c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400e80:	430a      	orrs	r2, r1
  400e82:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400e86:	e7da      	b.n	400e3e <__register_exitproc+0x3e>
  400e88:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400e8c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400e90:	e7c1      	b.n	400e16 <__register_exitproc+0x16>
  400e92:	f04f 30ff 	mov.w	r0, #4294967295
  400e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e9a:	bf00      	nop
  400e9c:	00400ea8 	.word	0x00400ea8
  400ea0:	00000000 	.word	0x00000000
  400ea4:	00000043 	.word	0x00000043

00400ea8 <_global_impure_ptr>:
  400ea8:	20000098                                ... 

00400eac <_init>:
  400eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400eae:	bf00      	nop
  400eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400eb2:	bc08      	pop	{r3}
  400eb4:	469e      	mov	lr, r3
  400eb6:	4770      	bx	lr

00400eb8 <__init_array_start>:
  400eb8:	00400db9 	.word	0x00400db9

00400ebc <__frame_dummy_init_array_entry>:
  400ebc:	0040016d                                m.@.

00400ec0 <_fini>:
  400ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ec2:	bf00      	nop
  400ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400ec6:	bc08      	pop	{r3}
  400ec8:	469e      	mov	lr, r3
  400eca:	4770      	bx	lr

00400ecc <__fini_array_start>:
  400ecc:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b343      	cbz	r3, 2000005a <efc_perform_read_sequence+0x5a>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0301 	ands.w	r3, r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14e      	cbz	r6, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	42b1      	cmp	r1, r6
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003c:	b2d2      	uxtb	r2, r2
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6882      	ldr	r2, [r0, #8]
20000046:	9201      	str	r2, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9a01      	ldr	r2, [sp, #4]
2000004a:	f012 0f01 	tst.w	r2, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6802      	ldr	r2, [r0, #0]
20000052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20000056:	6002      	str	r2, [r0, #0]

	return EFC_RC_OK;
20000058:	e000      	b.n	2000005c <efc_perform_read_sequence+0x5c>
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
2000005a:	2302      	movs	r3, #2
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
}
2000005c:	4618      	mov	r0, r3
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <g_interrupt_enabled>:
20000088:	0001 0000                                   ....

2000008c <SystemCoreClock>:
2000008c:	1200 007a                                   ..z.

20000090 <test_data.8590>:
20000090:	7fff 0000 0000 0000                         ........

20000098 <impure_data>:
20000098:	0000 0000 0384 2000 03ec 2000 0454 2000     ....... ... T.. 
	...
200000cc:	0ea4 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
20000140:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000150:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
