/**
 *	MSM program to transfer PDM microphone data over SPI/TDM BUS  
 *
 */

#include <inttypes.h>
#include "asf.h"
#include "conf_board.h"
#include "conf_spi_pdc_example.h"
#include "delay.h"

// Needed includes
#include "pdm_lib.h"
#include "yas_acc_driver-lis331dlh.h"

#if (SAMG55)
#include "flexcom.h"
#endif

/// @cond 0
/**INDENT-OFF**/
#ifdef __cplusplus
extern "C" {
#endif
/**INDENT-ON**/
/// @endcond

/****************************************************************************************
 * Defines
 ****************************************************************************************/

#define SPI_CHIP_SEL 		0 		/* Chip select. */
#define SPI_CLK_POLARITY 	0 		/* Clock polarity. */
#define SPI_CLK_PHASE 		1 		/* Clock phase. */
#define SPI_DLYBS 			0x40 	/* Delay before SPCK. */					// not used at the moment
#define SPI_DLYBCT 			0x10 	/* Delay between consecutive transfers. */	// not used atm
#define COMM_BUFFER_SIZE	4		/* SPI Communicate buffer size. */
#define TDM_SLAVE 			5		/* Can be 0 to 7 for TDM8 */
#define TDM_LRCLK_GEN		0		/* Enables Clock to generate TDM Clock */

#define TC_WAVEFORM_CLOCK_SELECTION TC_CMR_TCCLKS_XC1
// Settings for LRCLK generator
#define TC_WAVEFORM_CLOCK_SELECTION_1 TC_CMR_TCCLKS_TIMER_CLOCK1
#define TC_WAVEFORM_DIVISOR		2		/* needs to correspond with line above */
#define TC_WAVEFORM_FREQUENCY	48000 /* rate at witch Audio is sampled 48kHz */
#define TC_WAVEFORM_DUTY_CYCLE	8	/* duty cycle of 5% adept when better known*/

/****************************************************************************************
 * Global variables
 ****************************************************************************************/

static uint8_t gs_uc_spi_s_tbuffer[COMM_BUFFER_SIZE] = {0};
static uint8_t gs_uc_spi_s_rbuffer[COMM_BUFFER_SIZE];

//uint32_t counter

/* Globally available PDMIC module struct */
static struct pdm_instance g_pdm0;

/* Pointer to UART PDC register base */
Pdc *g_p_spim_pdc, *g_p_spis_pdc;

uint16_t g_mic_gain = 1500;

/****************************************************************************************
 * Functions
 ****************************************************************************************/

/* Prototypes */
void init_pdm(void);
void enable_pdm(void);
static void tc_waveform_initialize(void);

/**
 * \brief Set SPI slave transfer.
 *
 * \param p_tbuf Pointer to transmit buffer.
 * \param tsize Size of transmit buffer.
 * \param p_rbuf Pointer to receive buffer.
 * \param rsize Size of receive buffer.
 */
static void spi_slave_transfer(void *p_tbuf, uint32_t tsize, void *p_rbuf, uint32_t rsize)
{
	//uint32_t spi_ier;
	pdc_packet_t pdc_spi_packet;

	//pdc_spi_packet.ul_addr = (uint32_t)p_rbuf;
	//pdc_spi_packet.ul_size = rsize;
	//pdc_rx_init(g_p_spis_pdc, &pdc_spi_packet, NULL);

	pdc_spi_packet.ul_addr = (uint32_t)p_tbuf;
	pdc_spi_packet.ul_size = tsize;
	pdc_tx_init(g_p_spis_pdc, &pdc_spi_packet, NULL);
	
	///* Enable the RX and TX PDC transfer requests */
	////pdc_enable_transfer(g_p_spis_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
	//pdc_enable_transfer(g_p_spis_pdc, PERIPH_PTCR_TXTEN);

	///* Transfer done handler is in ISR */
	//spi_ier = SPI_IER_NSSR;// | SPI_IER_RXBUFF;;
	//spi_enable_interrupt(SPI_SLAVE_BASE, spi_ier) ;
}

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
	uint32_t status;
	static volatile int32_t pdm0_data = 0;
	gs_uc_spi_s_tbuffer[3] = 0x00;
	//gs_uc_spi_s_tbuffer[2] = 0x00;
		
	status = spi_read_status(SPI_SLAVE_BASE) ;

    //static int16_t test_data = 32767;

	if(status & SPI_SR_NSSR) {
		
		// wait until pdm interrupt fires so data is available
		while (!((g_pdm0.hw->PDMIC_ISR) & PDMIC_INTERRUPT_SRC_DATA_READY))
		{
			//ioport_set_pin_level(LED_1_PIN, 0);
		}
		pdm0_data = (g_pdm0.hw->PDMIC_CDR);

		gs_uc_spi_s_tbuffer[2] = (uint8_t)(0xfe);//(pdm0_data);
		gs_uc_spi_s_tbuffer[1] = (uint8_t)(0xfc);//(pdm0_data >> 8);
		gs_uc_spi_s_tbuffer[0] = (uint8_t)(0xf9);//(pdm0_data >> 16);
		//gs_uc_spi_s_tbuffer[2] = (uint8_t)(pdm0_data);
		//gs_uc_spi_s_tbuffer[1] = (uint8_t)(pdm0_data >> 8);
		//gs_uc_spi_s_tbuffer[0] = (uint8_t)(pdm0_data >> 16);
		
		spi_slave_transfer(gs_uc_spi_s_tbuffer, COMM_BUFFER_SIZE,
					gs_uc_spi_s_rbuffer, COMM_BUFFER_SIZE);
		//if (test_data < 1)
		//{
			//test_data=32766;
		//}

	}	
}

/**
 * \brief Initialize SPI as slave.
 * SPI 5 of the USART Instance is being used.
 */
static void spi_slave_initialize(void)
{
	uint32_t i;

	/* Get pointer to SPI slave PDC register base */
	g_p_spis_pdc = spi_get_pdc_base(SPI_SLAVE_BASE);
	
	//puts("-I- Initialize SPI as slave \r");

	for (i = 0; i < COMM_BUFFER_SIZE; i++) {
		gs_uc_spi_s_tbuffer[i] = i+1;
	}
	
#if (SAMG55)
	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	/* Configure an SPI peripheral. */
	pmc_enable_periph_clk(SPI_ID);
#endif
	spi_disable(SPI_SLAVE_BASE);
	spi_reset(SPI_SLAVE_BASE);
	spi_set_slave_mode(SPI_SLAVE_BASE);
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_SEL);
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL,
			SPI_CSR_BITS_8_BIT);
	spi_enable(SPI_SLAVE_BASE);
	
	pdc_disable_transfer(g_p_spis_pdc, PERIPH_PTCR_RXTDIS |
			PERIPH_PTCR_TXTDIS);
	//spi_slave_transfer(gs_uc_spi_s_tbuffer, COMM_BUFFER_SIZE,
			//gs_uc_spi_s_rbuffer, COMM_BUFFER_SIZE);			
			
	/* Enable the RX and TX PDC transfer requests */
	//pdc_enable_transfer(g_p_spis_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
	pdc_enable_transfer(g_p_spis_pdc, PERIPH_PTCR_TXTEN);

	/* Transfer done handler is in ISR */
	spi_enable_interrupt(SPI_SLAVE_BASE, SPI_IER_NSSR); //rising edge on chip-select triggers interrupt
}

/****************************************************************************************
 * Main function
 ****************************************************************************************/

int main(void)
{
	 uint32_t i;

	/* Initialize the SAM system. */
	sysclk_init(); // Config clocks, system clock speed is 120 MHz
	board_init(); // Initializes I/O Ports, LEDs, Switches, ...
	tc_waveform_initialize();
	
	/* INIT and start PDM Interface. */
	init_pdm();
	Enable_global_interrupt();
	enable_pdm();
	//
	//
	/* Configure SPI interrupts for slave only. */
	NVIC_DisableIRQ(SPI_IRQn);
	NVIC_ClearPendingIRQ(SPI_IRQn);
	NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);

	spi_slave_initialize();
		
	while (1) {

		//ioport_toggle_pin_level(LED_1_PIN);
		//ioport_toggle_pin_level(LED_0_PIN);
		//for (i=0; i<10000000; i++)
		//{
			//
		//}
		
	}
}

/// @cond 0
/**INDENT-OFF**/
#ifdef __cplusplus
}
#endif
/**INDENT-ON**/
/// @endcond


/****************************************************************************************
 * PDM0 initialization and enable functions
 ****************************************************************************************/

/* Two buffers to store the PCM data */
//static int16_t audio_buffer[2][PCM_BUF_SIZE];
/* Global variable to say which of the buffers should be used */
//static uint8_t buffer_index = 0;


/**
 * \brief Function to setup the PDM module.
 * PDMIC - Pulse Density Modulation Interface Controller
 */
void init_pdm(void)
{
	/* PDM configuration structure / PDM Interface Controller 0 - */
	struct pdm_config conf_pdmic0;
	/* Get default configuration */
	pdm_get_config_default(&conf_pdmic0);
	/* Prescaler for 3,072 MHz PDM clock */
	conf_pdmic0.prescal = PDM_PRESCALER;
	/* Set gain to 1 - if not, all conversions are 0 */
	conf_pdmic0.gain = g_mic_gain;
	//conf_pdmic0.data_scale = 4;

	/* Oversampling ratio */
	conf_pdmic0.oversampling_ratio = PDMIC_OVERSAMPLING_RATIO_64;
	conf_pdmic0.sincc_filter_bypass =0; //default already is false, see 'pdm_get_config_default'
	/* Data size */
	conf_pdmic0.conver_data_size = PDMIC_CONVERTED_DATA_SIZE_32;
	/* Initialize PDMIC0 with configuration */
	pdm_init(&g_pdm0, PDMIC0, &conf_pdmic0);	
	
	// 	/* PDM Interface Controller 1 -  */
	// 	struct pdm_config conf_pdmic1;
	// 	pdm_get_config_default(&conf_pdmic1);
	// 	conf_pdmic1.prescal = PDM_PRESCALER;
	// 	conf_pdmic1.gain = 1;
	// 	conf_pdmic1.oversampling_ratio = PDMIC_OVERSAMPLING_RATIO_64;
	// 	conf_pdmic1.conver_data_size = PDMIC_CONVERTED_DATA_SIZE_16;
	// 	pdm_init(&pdm1, PDMIC1, &conf_pdmic1);
	
	/* PDM Interrupts */
//Auskommentiert am 03.08.2017
	NVIC_DisableIRQ(PDMIC0_IRQn);
	NVIC_ClearPendingIRQ(PDMIC0_IRQn);
	NVIC_SetPriority(PDMIC0_IRQn, PDM_INTERRUPT_PRIORITY);
	NVIC_EnableIRQ(PDMIC0_IRQn);	
/*	// 	NVIC_DisableIRQ(PDMIC1_IRQn);
	// 	NVIC_ClearPendingIRQ(PDMIC1_IRQn);
	// 	NVIC_SetPriority(PDMIC1_IRQn, 0);
	// 	NVIC_EnableIRQ(PDMIC1_IRQn);	
	pdm_enable_interrupt(&g_pdm0, PDMIC_INTERRUPT_SRC_DATA_READY);
	//	pdm_enable_interrupt(&pdm1, PDMIC_INTERRUPT_SRC_DATA_READY);
*/	
	//ioport_set_pin_level(LED_1_PIN, 0);

}

/**
 * \brief Function to enable the PDM module
 */
void enable_pdm(void)
{	
	/* Enable PDM module */
	pdm_enable(&g_pdm0);	
	//ioport_set_pin_level(LED_0_PIN, 0);

}

/**
 * \brief Function to initialize timer counter (TC) waveform
 */
static void tc_waveform_initialize(void)
{
	// all three registers RA, RB and RC can be used as compare registers in waveform mode
	//uint32_t ra = 32; // 0x20
	//uint32_t rb = 32; // 0x20 commented out for new modes (MW 07.02.2020)
	//uint32_t rc = 65; // 0x41
	uint32_t ra = 0;
	uint32_t rb = 0;
	uint32_t rc = 0;
	
	uint32_t tdm_slave_config = 0;
	
	/* Configure the Power Management Controller (PMC) to enable the TC module. */
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM);
	
	#if SAMG55
	/* Enable PCK output:
	   TC is clocked through the Power Management Controller (PMC), thus the 
	   programmer must first configure the PMC to enable the Timer Counter
	   clock of each channel. PCK3 corresponds to the TC. (p.414)
	   MCK - Master Clock (p.407)
	   PCK - Programmable Clock Outputs (p.407)*/
	pmc_disable_pck(PMC_PCK_3);
	pmc_switch_pck_to_mck(PMC_PCK_3, PMC_PCK_PRES(0)); //make TC run on Master Clock (p.413) without any prescaler
	pmc_enable_pck(PMC_PCK_3);
	#endif

	#if TDM_SLAVE == 0
	ra = 32; // 0x20
	rb = 32; // 0x20
	rc = 65; // 0x41
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_SET		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET	// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_CLEAR	// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_CLEAR		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_SET		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_SET;		// External Event Effect on TIOBx (p.559)
	#endif

	#if TDM_SLAVE == 1
	ra = 32; // 0x20
	rb = 32; // 0x20
	rc = 65; // 0x41
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_NONE		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	#if TDM_SLAVE == 2
	ra = 64; 
	rb = 32; // 0x20
	rc = 97; 
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_NONE		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	#if TDM_SLAVE == 3
	ra = 96;
	rb = 32; // 0x20
	rc = 129;
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_NONE		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	#if TDM_SLAVE == 4
	ra = 128;
	rb = 32; // 0x20
	rc = 161;
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_NONE		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	#if TDM_SLAVE == 5
	ra = 160;
	rb = 32; // 0x20
	rc = 192;
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_NONE		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	#if TDM_SLAVE == 6
	ra = 192;
	rb = 32; // 0x20
	rc = 225;
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_SET		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	#if TDM_SLAVE == 7
	ra = 224;
	rb = 32; // 0x20
	rc = 257;
	tdm_slave_config = 0x00
	| TC_CMR_ACPA_CLEAR		// RA Compare Effect on TIOAx (p.558)
	| TC_CMR_ACPC_SET		// RC Compare Effect on TIOAx (p.559)
	| TC_CMR_AEEVT_SET		// External Event Effect on TIOAx (p.559)
	
	| TC_CMR_BCPB_SET		// RB Compare Effect on TIOBx (p.559)
	| TC_CMR_BCPC_CLEAR		// RC Compare Effect on TIOBx (p.559)
	| TC_CMR_BEEVT_CLEAR;	// External Event Effect on TIOBx (p.559)
	#endif
	
	tc_init(TC, TC_CHANNEL_WAVEFORM,	// TC_CHANNEL_WAVEFORM = 2 -> only using TC channel 2
			  TC_CMR_TCCLKS_XC1			// Clock Selection for channel 2 is XC1 which is connected to BCLK on Pin PA19
			| TC_CMR_WAVE				// Waveform mode is enabled (p.540/544)
			| TC_CMR_EEVTEDG_FALLING	// External Event Trigger on falling Edge
			| TC_CMR_EEVT_XC2			// Using XC2 as an External Event (p.550) This is connected to LRCLK on Pin PA20 -> TIOB is an output (p.558)
			| TC_CMR_ENETRG				// External Event Trigger Enable (p.541) External Event resets the counter and starts the counter clock (p.558)
			| TC_CMR_CLKI				// Inverts input clock (p.538) Counter is incremented on falling edge of the clock (p.557)
			| TC_CMR_WAVSEL_UP			// equals WAVSEL=00 (p.546) Without automatic trigger on RC Compare (p.558)
			| tdm_slave_config
	);
	// => TIOA is configured as an output (used as CS for SPI)
	// CPCSTOP = 0 : Counter clock is not stopped when counter reaches RC
	// CPCDIS  = 0 : Counter clock is not disabled when counter reaches RC
	
	
	//tc_set_block_mode(TC, TC_BMR_TC2XC2S_TCLK2);
	
	/* set input clock signals*/
	TC->TC_BMR = 0x00000000;			// Timer Counter 0 uses external clock TCLK0 (p.538/p.576)
										// Timer Counter 1 uses external clock TCLK1 (p.538/p.576)
										// Timer Counter 2 uses external clock TCLK2 (p.538/p.576)
	/* NOTE: writing this register has possibly no effect -> see p.576 of
	         SAM G55 datasheet: TC_WPMR needs to be cleared first */
	
	/* Write values to compare registers RA, RB and RC (p.544)*/
	tc_write_ra(TC,TC_CHANNEL_WAVEFORM, ra); // Write a value to TC Register A (RA) on the specified channel
	tc_write_rb(TC,TC_CHANNEL_WAVEFORM, rb); // Write a value to TC Register B (RB) on the specified channel
	tc_write_rc(TC,TC_CHANNEL_WAVEFORM, rc); // Write a value to TC Register C (RC) on the specified channel

	tc_start(TC, TC_CHANNEL_WAVEFORM); // Start the TC clock on the specified channel
	
	/* Create LRCLK when needed */
	#if TDM_LRCLK_GEN == 1
	ioport_set_pin_mode(PIN_TC_WAVEFROM_B_1, PIN_TC_WAVEFOEM_B_MUX_1);
	ioport_disable_pin(PIN_TC_WAVEFROM_B_1);
	
	sysclk_enable_peripheral_clock(ID_TC_WAVEFORM_1);
	
	uint32_t config = 0x0900C400;
			/*| TC_WAVEFORM_CLOCK_SELECTION_1
			| TC_CMR_WAVE				// enable waveform mode
			| TC_CMR_CPCTRG				// count up clear on rc
			| TC_CMR_BCPB_SET			// set on RB compare event
			| TC_CMR_BCPC_SET	;		// clear on RC compare event*/
	tc_init(TC,TC_CHANNEL_WAVEFORM_1,config);	// TC modul 1
			 
	
	rc = (sysclk_get_peripheral_bus_hz(TC) /
			TC_WAVEFORM_DIVISOR /
			TC_WAVEFORM_FREQUENCY);
	rb = ((1000 - TC_WAVEFORM_DUTY_CYCLE) * rc / 1000);
	
	tc_write_rb(TC,TC_CHANNEL_WAVEFORM_1,rb);

	tc_write_rc(TC,TC_CHANNEL_WAVEFORM_1,rc);
	
	
	tc_start(TC, TC_CHANNEL_WAVEFORM_1); //start Timer
	
	#endif
}



